name: codex-triage

on:
  workflow_run:
    workflows: ["codex-solve"]
    types: [completed]
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue:
        description: "Issue number (optional manual run)"
        required: false

permissions:
  contents: write
  issues: write
  actions: write
  pull-requests: write

jobs:
  triage:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure')
      || (github.event_name == 'issues' && (github.event.action == 'labeled') && (contains('contextmap-error,solver-error', github.event.label.name)))
      || (github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install requirements
        shell: bash
        run: |
          pip install -U pip
          if [ -f .github/codex/requirements.txt ]; then
            pip install -r .github/codex/requirements.txt
          else
            pip install 'requests>=2.32.3,<3' 'chardet>=5.2.0,<6' 'openai>=1.40.0,<2' 'unidiff>=0.7.5,<1'
          fi

      - name: Unpack shared-lib (optional)
        shell: bash
        run: |
          if [ ! -d .github/codex/lib ] && [ -f .github/codex/codex-shared-lib.zip ]; then
            python - <<'PY'
import zipfile, os
z=zipfile.ZipFile('.github/codex/codex-shared-lib.zip')
z.extractall('.github/codex/lib')
print('unzipped shared lib')
PY
          fi

      - name: Derive ISSUE_NUMBER from workflow_run (if present)
        if: github.event_name == 'workflow_run'
        id: derive
        shell: bash
        run: |
          python - <<'PY'
import json, os, re, sys
p=os.environ.get("GITHUB_EVENT_PATH")
data=json.load(open(p))
hb=(data.get("workflow_run") or {}).get("head_branch","") or ""
m=re.match(r"SOLVERBOT/(\d+)/", hb)
issue = m.group(1) if m else ""
with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
    f.write(f"issue={issue}\n")
print("ISSUE_NUMBER derived:", issue)
PY

      - name: Run Triage (Bot 3)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          ISSUE_NUMBER: ${{ inputs.issue || steps.derive.outputs.issue }}
          TRIAGE_WRITE: 'false'
          TRIAGE_OPEN_PR: 'true'
          TRIAGE_RERUN_SOLVER: 'true'
        run: python -u .github/codex/bot_triage.py
