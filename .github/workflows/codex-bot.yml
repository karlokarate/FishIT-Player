# force redeploy – aktiviert alle Trigger
name: Codex Bot (on-demand)

on:
  issue_comment:
    types: [created, edited]
  issues:
    types: [opened, edited]
  pull_request_review_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      comment:
        description: 'Optional: /codex Befehl manuell auslösen'
        type: string
        required: false
      gradle_args:
        description: 'Optional: Gradle-Args (z. B. "assembleDebug testDebugUnitTest")'
        type: string
        required: false

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codex-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  gate:
    name: Route command / security gate
    runs-on: ubuntu-latest
    outputs:
      run_codex:  ${{ steps.gate.outputs.run_codex }}
      do_gradle:  ${{ steps.gate.outputs.do_gradle }}
      gradle_args:${{ steps.gate.outputs.gradle_args }}
      issue_no:   ${{ steps.gate.outputs.issue_no }}
    steps:
      - id: gate
        shell: bash
        run: |
          set -euo pipefail
          ev="${{ github.event_name }}"
          body=""
          issue_no=""

          if [[ "$ev" == "workflow_dispatch" ]]; then
            body="${{ inputs.comment || '' }}"
          elif [[ "$ev" == "issue_comment" ]]; then
            body="${{ github.event.comment.body || '' }}"
            issue_no="${{ github.event.issue.number }}"
          elif [[ "$ev" == "pull_request_review_comment" ]]; then
            body="${{ github.event.comment.body || '' }}"
            issue_no="${{ github.event.pull_request.number }}"
          elif [[ "$ev" == "issues" ]]; then
            body="${{ github.event.issue.body || '' }}"
            issue_no="${{ github.event.issue.number }}"

            # Speziell: nur bei "opened" und gültigem /codex triggern
            action=$(jq -r .action "$GITHUB_EVENT_PATH")
            if [[ "$action" == "opened" ]] && echo "$body" | grep -qi "/codex"; then
              run_codex=true
            fi
          fi

          # Default Flags
          run_codex=${run_codex:-false}
          do_gradle=false
          args=""

          # Fallback: alle anderen erkennen /codex im Body
          if echo "$body" | grep -qi "/codex"; then
            run_codex=true
          fi

          # Manuell über dispatch
          if [[ "$ev" == "workflow_dispatch" && -n "${{ inputs.comment }}" ]]; then
            run_codex=true
          fi

          # Gradle-Steuerung
          if echo "$body" | grep -qiE '/codex[[:space:]]+build([[:space:]]|$)'; then
            do_gradle=true; args="assembleDebug"
          fi
          if echo "$body" | grep -qiE '/codex[[:space:]]+test([[:space:]]|$)'; then
            do_gradle=true; args="testDebugUnitTest"
          fi
          if echo "$body" | grep -qiE '/codex[[:space:]]+verify-?tdlib([[:space:]]|$)'; then
            do_gradle=true; args="verifyTdlib"
          fi
          if echo "$body" | grep -qiE '/codex[[:space:]]+gradle[[:space:]]+'; then
            do_gradle=true
            args="$(printf '%s\n' "$body" | sed -n 's#.*\/codex[[:space:]]\+gradle[[:space:]]\+##Ip' | head -n1)"
          fi

          if $run_codex && echo "$body" | grep -qi -- ' --verify'; then
            do_gradle=true
            if [[ -z "$args" ]]; then args="testDebugUnitTest"; fi
          fi

          if [[ "$ev" == "workflow_dispatch" && -n "${{ inputs.gradle_args }}" ]]; then
            do_gradle=true; args="${{ inputs.gradle_args }}"
          fi

          echo "run_codex=$run_codex"   >> "$GITHUB_OUTPUT"
          echo "do_gradle=$do_gradle"   >> "$GITHUB_OUTPUT"
          echo "gradle_args=$args"      >> "$GITHUB_OUTPUT"
          echo "issue_no=$issue_no"     >> "$GITHUB_OUTPUT"

      - name: Debug gate
        run: |
          echo "event=${{ github.event_name }}"
          echo "run_codex=${{ steps.gate.outputs.run_codex }}"
          echo "do_gradle=${{ steps.gate.outputs.do_gradle }}"
          echo "gradle_args=${{ steps.gate.outputs.gradle_args }}"
          echo "issue_no=${{ steps.gate.outputs.issue_no }}"

  ack:
    name: Ack in Thread
    needs: gate
    if: ${{ needs.gate.outputs.run_codex == 'true' && github.event_name != 'workflow_dispatch' && needs.gate.outputs.issue_no != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ needs.gate.outputs.issue_no }}
          body: |
            ✅ **Befehl empfangen.**
            - gradle: `${{ needs.gate.outputs.do_gradle }}`
            - args: `${{ needs.gate.outputs.gradle_args }}`

  codex:
    name: Run Codex Bot
    needs: gate
    if: ${{ needs.gate.outputs.run_codex == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [[ -f .github/codex/requirements.txt ]]; then
            pip install -r .github/codex/requirements.txt
          else
            pip install "openai>=1.43.0" "unidiff>=0.7.5" "requests>=2.31.0"
          fi

      - name: Run Codex Bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          OPENAI_MODEL_DEFAULT: ${{ vars.OPENAI_MODEL_DEFAULT }}
          OPENAI_REASONING_EFFORT: ${{ vars.OPENAI_REASONING_EFFORT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GH_EVENT_NAME: ${{ github.event_name }}
          DISPATCH_COMMENT: ${{ inputs.comment }}
          CODEX_ALLOWLIST: ${{ vars.CODEX_ALLOWLIST }}
        run: python .github/codex/bot.py