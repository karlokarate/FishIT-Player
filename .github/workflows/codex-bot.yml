name: Codex Bot (robust)

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]
  pull_request_review_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      comment:
        description: "Optional: /codex Befehl manuell auslösen"
        type: string
        required: false
      gradle_args:
        description: "Optional: Gradle-Args (z. B. assembleDebug)"
        type: string
        required: false

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codex-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  codex:
    # Triggert bei /codex überall (Kommentar, Issue-Body, Review-Kommentar) ODER manuell
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/codex')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '/codex')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '/codex'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [[ -f .github/codex/requirements.txt ]]; then
            pip install -r .github/codex/requirements.txt
          else
            pip install "openai>=1.43.0" "unidiff>=0.7.5" "requests>=2.31.0"
          fi

      - name: Run Codex Bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          OPENAI_MODEL_DEFAULT: ${{ vars.OPENAI_MODEL_DEFAULT }}
          OPENAI_REASONING_EFFORT: ${{ vars.OPENAI_REASONING_EFFORT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GH_EVENT_NAME: ${{ github.event_name }}
          DISPATCH_COMMENT: ${{ inputs.comment }}
          CODEX_ALLOWLIST: ${{ vars.CODEX_ALLOWLIST }}
        run: python .github/codex/bot.py

  gradle:
    name: Gradle Build/Test (optional)
    needs: codex
    if: >
      (github.event_name == 'issue_comment' && (
        contains(github.event.comment.body, '/codex build') ||
        contains(github.event.comment.body, '/codex test') ||
        contains(github.event.comment.body, '/codex verify') ||
        contains(github.event.comment.body, '/codex gradle')
      )) ||
      (github.event_name == 'issues' && (
        contains(github.event.issue.body, '/codex build') ||
        contains(github.event.issue.body, '/codex test') ||
        contains(github.event.issue.body, '/codex verify') ||
        contains(github.event.issue.body, '/codex gradle')
      )) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.gradle_args != '')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Gradle
        env:
          HEADER: ${{ secrets.header }}
          TG_API_ID: ${{ secrets.TG_API_ID }}
          TG_API_HASH: ${{ secrets.TG_API_HASH }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.gradle_args }}" ]]; then
            ./gradlew -S --no-daemon --build-cache ${{ github.event.inputs.gradle_args }}
          else
            body="$(jq -r '.comment.body // .issue.body' $GITHUB_EVENT_PATH)"
            if echo "$body" | grep -qi '/codex build'; then
              ./gradlew -S --no-daemon --build-cache assembleDebug
            elif echo "$body" | grep -qi '/codex test'; then
              ./gradlew -S --no-daemon --build-cache testDebugUnitTest
            elif echo "$body" | grep -qi '/codex verify'; then
              ./gradlew -S --no-daemon --build-cache verifyTdlib
            elif echo "$body" | grep -qi '/codex gradle'; then
              args=$(echo "$body" | sed -n 's#.*\/codex[[:space:]]\+gradle[[:space:]]\+##Ip' | head -n1)
              ./gradlew -S --no-daemon --build-cache $args
            fi
          fi
