name: Codex Bot

on:
  # Reagiert auf neue/editiere Issues (z. B. /codex … im Body)
  issues:
    types: [opened, edited]
  # Reagiert auf neue Issue-Kommentare (z. B. /codex … als Kommentar)
  issue_comment:
    types: [created]
  # Optional: PR-Review-Kommentare erlauben
  pull_request_review_comment:
    types: [created]
  # Manueller Start mit optionalem Kommentartext (Simuliert ein Event)
  workflow_dispatch:
    inputs:
      comment:
        description: "/codex … Befehl (optional)"
        required: false
        default: ""

permissions:
  contents: write          # für Branch/Commit
  pull-requests: write     # für PRs + Auto-Merge-Versuche
  actions: write           # für workflow_dispatch aus dem Bot heraus (falls verwendet)

concurrency:
  group: codex-bot-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run-codex-bot:
    name: Run Codex Bot
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade openai unidiff requests

      - name: Show triggering info
        run: |
          echo "github.event_name = ${{ github.event_name }}"
          echo "workflow_dispatch input.comment = ${{ inputs.comment }}"
          echo "actor = ${{ github.actor }}"
          echo "ref = ${{ github.ref }}"
          echo "sha = ${{ github.sha }}"

      - name: Set env for bot
        run: |
          # wenn workflow_dispatch → simulierten Kommentar in DISPATCH_COMMENT legen
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DISPATCH_COMMENT=${{ inputs.comment }}" >> $GITHUB_ENV
          fi
          # GH_EVENT_NAME für den Bot explizit setzen (der Bot liest GH_EVENT_NAME)
          echo "GH_EVENT_NAME=${{ github.event_name }}" >> $GITHUB_ENV
        shell: bash

      - name: Run Codex Bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}   # optional; leer lassen falls nicht genutzt
          OPENAI_MODEL_DEFAULT: ${{ vars.OPENAI_MODEL_DEFAULT || 'gpt-5' }}
          OPENAI_REASONING_EFFORT: ${{ vars.OPENAI_REASONING_EFFORT || 'high' }}

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          # GH_EVENT_NAME kommt aus $GITHUB_ENV (oben gesetzt)
          DISPATCH_COMMENT: ${{ env.DISPATCH_COMMENT }}
          CODEX_ALLOWLIST: ${{ vars.CODEX_ALLOWLIST }}      # optional: "userA,userB"
        run: |
          python .github/codex/bot.py