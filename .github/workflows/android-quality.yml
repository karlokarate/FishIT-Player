name: Android â€“ Quality Gate (Picker)

on:
  workflow_dispatch:
    inputs:
      sdk_api:
        description: "SDK Platform (Default 36)"
        required: false
        default: "36"
      build_tools:
        description: "Build-Tools (35.0.0 stabil; 36.x = EXPERIMENTAL, sinnvoll mit AGP â‰¥ 9)"
        required: false
        default: "35.0.0"
      jdk:
        description: "JDK (21 LTS empfohlen)"
        required: false
        default: "21"

      detekt:
        description: "Detekt ausfÃ¼hren"
        type: choice
        default: "true"
        options:
          - "true"
          - "false"
      ktlint:
        description: "Ktlint/Spotless prÃ¼fen"
        type: choice
        default: "true"
        options:
          - "true"
          - "false"
      android_lint:
        description: "Android Lint (Debug + Vital)"
        type: choice
        default: "true"
        options:
          - "true"
          - "false"
      unit_tests:
        description: "Unit-Tests (testDebugUnitTest)"
        type: choice
        default: "true"
        options:
          - "true"
          - "false"
      coverage_kover:
        description: "Coverage (Kover XML)"
        type: choice
        default: "false"
        options:
          - "true"
          - "false"
      dep_check:
        description: "OWASP Dependency-Check"
        type: choice
        default: "false"
        options:
          - "true"
          - "false"
      api_check:
        description: "API Check (metalava)"
        type: choice
        default: "false"
        options:
          - "true"
          - "false"

      use_gradle_9x:
        description: "Gradle 9.x OVERRIDE (RISKY) â€“ benÃ¶tigt AGP â‰¥ 8.13 ODER AGP 9 Preview"
        type: choice
        default: "false"
        options:
          - "false"
          - "true"
      gradle_9x_version:
        description: "Gradle 9.x Version (wirksam nur wenn use_gradle_9x=true)"
        required: false
        default: "9.1.0"
      agp_override:
        description: "AGP Override (z.B. 8.13.0 oder 9.0.0-alphaXX) â€“ bei Gradle 9.x mind. 8.13!"
        required: false
        default: ""
      kotlin_override:
        description: "Kotlin Override (z.B. 2.2.21) â€“ Compose/Media3-Kompat. beachten"
        required: false
        default: ""

      pr_comment:
        description: "PR-Kommentar mit Ergebnissen"
        type: choice
        default: "false"
        options:
          - "false"
          - "true"
      issue_number:
        description: "PR/Issue-Nummer (optional)"
        required: false
        default: ""

permissions:
  contents: read

concurrency:
  group: android-quality-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ github.event.inputs.jdk }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          packages: |
            platform-tools
            platforms;android-${{ github.event.inputs.sdk_api }}
            build-tools;${{ github.event.inputs.build_tools }}

      - name: Setup Gradle (cache+wrapper validation)
        uses: gradle/actions/setup-gradle@v5

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Risk Switches
      - name: Optional â€“ Gradle 9.x OVERRIDE (Guard prÃ¼ft AGP)
        if: ${{ github.event.inputs.use_gradle_9x == 'true' }}
        run: |
          set -euo pipefail
          V="${{ github.event.inputs.gradle_9x_version }}"
          if [[ ! -f gradle/wrapper/gradle-wrapper.properties ]]; then
            echo "::error::gradle-wrapper.properties fehlt"
            exit 1
          fi
          sed -i -E "s#distributionUrl=.*#distributionUrl=https://services.gradle.org/distributions/gradle-${V}-bin.zip#g" gradle/wrapper/gradle-wrapper.properties
          echo "Gradle Wrapper â†’ ${V}"
          AGP="$(grep -RhoE 'com\.android\.tools\.build:gradle:([0-9]+\.[0-9]+(\.[0-9]+)?)' -n --include=*.gradle* --exclude-dir=**/build | head -1 | sed -E 's/.*:([0-9.]+).*/\1/')"
          vergte() { [ "$1" = "$2" ] || [ "$(printf '%s\n%s\n' "$1" "$2" | sort -V | tail -n1)" = "$1" ]; }
          if [[ -n "$AGP" ]] && ! vergte "$AGP" "8.13.0"; then
            echo "::error::Gradle 9.x erfordert AGP >= 8.13 ODER AGP 9 Preview. Setze 'agp_override' entsprechend."
            exit 2
          fi

      - name: Optional â€“ AGP/Kotlin Override (In-Place Patch nur fÃ¼r Run)
        if: ${{ github.event.inputs.agp_override != '' || github.event.inputs.kotlin_override != '' }}
        run: |
          python3 - <<'PY'
          import re, pathlib, os
          agp = os.environ.get("AGP_NEW","").strip()
          kt  = os.environ.get("KOTLIN_NEW","").strip()
          files=[p for p in pathlib.Path(".").rglob("*") if p.is_file() and p.suffix in (".gradle",".kts",".toml") and "build" not in p.parts]
          for p in files:
            s=p.read_text(encoding="utf-8",errors="ignore"); o=s
            if agp:
              s=re.sub(r"(com\.android\.tools\.build:gradle:)\d+\.\d+(?:\.\d+)?", rf"\g<1>{agp}", s)
              s=re.sub(r'(id\(["\']com\.android\.(?:application|library|test|dynamic-feature)["\']\)\s+version\s+")[^"]+(")', rf"\g<1>{agp}\g<2>", s)
              s=re.sub(r'(?m)^(agp\s*=\s*")\d+\.\d+(?:\.\d+)?(")', rf"\g<1>{agp}\g<2>", s)
            if kt:
              s=re.sub(r'(org\.jetbrains\.kotlin:(?:kotlin-gradle-plugin|kotlin-stdlib)[^:]*:)\d+\.\d+(?:\.\d+)?', rf"\g<1>{kt}", s)
              s=re.sub(r'(id\(["\']org\.jetbrains\.kotlin\.(?:android|jvm|multiplatform)["\']\)\s+version\s+")[^"]+(")', rf"\g<1>{kt}\g<2>", s)
              s=re.sub(r'(?m)^(kotlin\s*=\s*")\d+\.\d+(?:\.\d+)?(")', rf"\g<1>{kt}\g<2>", s)
            if s!=o: p.write_text(s,encoding="utf-8")
          PY
        env:
          AGP_NEW: ${{ github.event.inputs.agp_override }}
          KOTLIN_NEW: ${{ github.event.inputs.kotlin_override }}

      - name: Problem-Matcher
        continue-on-error: true
        run: |
          if [[ -f .github/gradle-problem-matcher.json ]]; then
            echo "::add-matcher::.github/gradle-problem-matcher.json"
          fi

      # Checks
      - name: Helper â€“ run-if-task-exists
        shell: bash
        run: |
          cat > run-if-task-exists.sh <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          TASK="$1"; shift || true
          if ./gradlew -q tasks --all | grep -E "^[[:space:]]*$TASK[[:space:]]" >/dev/null; then
            echo "::group::Run $TASK"
            ./gradlew "$TASK" "$@" --configuration-cache --build-cache --stacktrace
            echo "::endgroup::"
          else
            echo "::notice::Gradle task '$TASK' nicht vorhanden â€“ Ã¼bersprungen."
          fi
          SH
          chmod +x run-if-task-exists.sh

      - name: Detekt
        if: ${{ github.event.inputs.detekt == 'true' }}
        run: ./run-if-task-exists.sh detekt

      - name: Ktlint/Spotless
        if: ${{ github.event.inputs.ktlint == 'true' }}
        run: ./run-if-task-exists.sh ktlintCheck || ./run-if-task-exists.sh spotlessCheck

      - name: Android Lint
        if: ${{ github.event.inputs.android_lint == 'true' }}
        run: |
          ./run-if-task-exists.sh lintDebug
          ./run-if-task-exists.sh lintVitalRelease

      - name: Unit-Tests
        if: ${{ github.event.inputs.unit_tests == 'true' }}
        run: ./run-if-task-exists.sh testDebugUnitTest --parallel

      - name: Coverage (Kover XML)
        if: ${{ github.event.inputs.coverage_kover == 'true' }}
        run: ./run-if-task-exists.sh koverXmlReport

      - name: Dependency-Check
        if: ${{ github.event.inputs.dep_check == 'true' }}
        run: ./run-if-task-exists.sh dependencyCheckAnalyze

      - name: API Check (metalava)
        if: ${{ github.event.inputs.api_check == 'true' }}
        run: ./run-if-task-exists.sh checkApi

      - name: Reports hochladen
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            **/build/reports/**
            **/build/test-results/**
            **/build/kover/**
          if-no-files-found: warn
          retention-days: 7

      - name: Build Summary
        if: always()
        run: |
          {
            echo "## Quality Gate â€“ Zusammenfassung"
            echo ""
            echo "**Run:** https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo ""
            echo "### Reports"
            find . -type f -path "**/build/reports/*" | sed 's/^/- /' || echo "- (keine)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: PR-Kommentar (optional)
        if: ${{ github.event.inputs.pr_comment == 'true' && (github.event_name == 'pull_request' || github.event.inputs.issue_number != '') }}
        uses: actions/github-script@v8
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const body = ["### ðŸ§ª Quality Gate fertig", `**Run:** ${runUrl}`, "", "Artefakte: **Artifacts** & **Run Summary**."].join("\n");
            const issue_number = context.payload.pull_request?.number || Number(core.getInput('issue_number'));
            if (issue_number) await github.rest.issues.createComment({ ...context.repo, issue_number, body });
