name: Android – Build (Release/Debug, signed, TDLib picker)

on:
  workflow_dispatch:
    inputs:
      toolchain_bundle:
        description: "Toolchain-Dispatcher (stable | lts | project)"
        type: choice
        required: true
        default: "stable"
        options: [stable, lts, project]
      build_type:
        description: "Build-Typ"
        type: choice
        required: true
        default: "release"
        options: [debug, release]
      abis:
        description: "ABIs"
        type: choice
        required: true
        default: "arm64+v7a"
        options: [arm64+v7a, arm64, v7a, universal]
      mirror_only:
        description: "Mirror-Modus → setzt TG_OBX_ENABLED_DEFAULT (true = deaktiviert)"
        type: choice
        required: true
        default: "true"
        options: ["true","false"]
      sign_apk:
        description: "APK signieren (Secrets nötig)"
        type: choice
        required: true
        default: "true"
        options: ["true","false"]
      rebuild_tdlib:
        description: "TDLib neu bauen (Cache ignorieren)"
        type: choice
        required: true
        default: "false"
        options: ["false","true"]
      tdlib_mode:
        description: "TDLib-Version: default | latest-tag | ref"
        type: choice
        required: true
        default: "default"
        options: [default, latest-tag, ref]
      tdlib_ref:
        description: "Wert für 'ref' (z.B. v1.x.y, SHA oder Branch). Für latest-tag leer lassen."
        required: false
        default: ""
      tdlib_build_type:
        description: "TDLib Build-Type (MinSizeRel=Default | Release)."
        type: choice
        required: true
        default: "MinSizeRel"
        options: [MinSizeRel, Release]
      config_json:
        description: "Sanitizer/Overrides als JSON (optional; kann base64:... sein). Kann auch flags enthalten: pr_annotations, debug_tmate (bool)."
        required: false
        default: ""

permissions:
  contents: read
  actions: write

concurrency:
  group: android-build-${{ github.ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx4g -XX:+UseParallelGC'"
      ORG_GRADLE_PROJECT_abiFilters: arm64-v8a,armeabi-v7a
      ORG_GRADLE_PROJECT_universalApk: false
      ORG_GRADLE_PROJECT_useSplits: true
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk

    steps:
      - name: Checkout (LFS & Submodules)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Toolchain-Dispatcher
        id: dispatch
        run: |
          set -euo pipefail
          BUNDLE="${{ github.event.inputs.toolchain_bundle }}"
          if [[ "$BUNDLE" == "stable" ]]; then
            SDK_API=35; BUILD_TOOLS="35.0.0"; NDK="27.3.13750724"; CMAKE_REQ="4.1.0"; CMAKE_FALLBACK="3.30.5"; JDK=21; GRADLE="8.13"; AGP="8.12.0"
          elif [[ "$BUNDLE" == "lts" ]]; then
            SDK_API=34; BUILD_TOOLS="34.0.0"; NDK="26.3.11333136"; CMAKE_REQ="4.1.0"; CMAKE_FALLBACK="3.22.1"; JDK=17; GRADLE="8.7"; AGP="8.5.2"
          else
            SDK_API=""; BUILD_TOOLS=""; NDK=""; CMAKE_REQ=""; CMAKE_FALLBACK="3.30.5"; JDK=""; GRADLE=""; AGP=""
            FILES=$(git ls-files '**/build.gradle' '**/build.gradle.kts' '**/gradle.properties' 2>/dev/null | grep -v '/build/' || true)
            BLOB=""
            if [[ -n "$FILES" ]]; then
              while IFS= read -r f; do BLOB+=$'\n'$(cat "$f"); done <<< "$FILES"
            fi
            SDK_API=$(printf '%s' "$BLOB" | sed -nE 's/.*compileSdk[ =:]*([0-9]+).*/\1/p' | head -1 || true)
            BUILD_TOOLS=$(printf '%s' "$BLOB" | sed -nE 's/.*buildToolsVersion[ =:]*["'\"'"']?([^"'"'"' ]+).*/\1/p' | head -1 || true)
            NDK=$(printf '%s' "$BLOB" | sed -nE 's/.*ndkVersion[ =:]*["'\"'"']?([^"'"'"' ]+).*/\1/p' | head -1 || true)
            AGP=$(printf '%s' "$BLOB" | sed -nE 's/.*com\.android\.tools\.build:gradle:([0-9]+\.[0-9]+(\.[0-9]+)?).*/\1/p' | head -1 || true)
            [[ -z "$SDK_API" ]] && SDK_API=35
            [[ -z "$BUILD_TOOLS" ]] && BUILD_TOOLS="35.0.0"
            [[ -z "$NDK" ]] && NDK="27.3.13750724"
            CMAKE_REQ="4.1.0"; CMAKE_FALLBACK="3.30.5"
            JDK=21; GRADLE="8.13"
          fi
          {
            echo "SDK_API=$SDK_API"
            echo "BUILD_TOOLS=$BUILD_TOOLS"
            echo "NDK_VER=$NDK"
            echo "CMAKE_REQ=$CMAKE_REQ"
            echo "CMAKE_FALLBACK=$CMAKE_FALLBACK"
            echo "JDK_VER=$JDK"
            echo "GRADLE_VER=$GRADLE"
            echo "AGP_VER=$AGP"
          } >> $GITHUB_ENV
          echo "bundle=$BUNDLE" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JDK_VER }}

      - name: Pin Gradle Wrapper (from Toolchain)
        if: ${{ steps.dispatch.outputs.bundle != 'project' }}
        run: |
          set -euo pipefail
          WRAP=gradle/wrapper/gradle-wrapper.properties
          [[ -f "$WRAP" ]] || { echo "::error::gradle-wrapper.properties fehlt"; exit 1; }
          sed -i -E "s#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-${{ env.GRADLE_VER }}-bin.zip#g" "$WRAP"
          echo "Wrapper → Gradle ${{ env.GRADLE_VER }}"

      - name: Optional – Patch AGP (from Toolchain)
        if: ${{ steps.dispatch.outputs.bundle != 'project' && env.AGP_VER != '' }}
        run: |
          python3 - <<'PY'
          import re, pathlib, os
          agp = os.environ.get("AGP_VER","").strip()
          files=[p for p in pathlib.Path(".").rglob("*") if p.is_file() and p.suffix in (".gradle",".kts",".toml") and "build" not in p.parts]
          for p in files:
            s=p.read_text(encoding="utf-8",errors="ignore"); o=s
            s=re.sub(r"(com\.android\.tools\.build:gradle:)\d+\.\d+(?:\.\d+)?", rf"\g<1>{agp}", s)
            s=re.sub(r'(id\(["\']com\.android\.(?:application|library|test|dynamic-feature)["\']\)\s+version\s+")([^"]+)(")', rf"\1{agp}\3", s)
            if s!=o: p.write_text(s,encoding="utf-8")
          print("AGP pinned to", agp)
          PY

      - name: Setup Gradle (cache + wrapper validation)
        uses: gradle/actions/setup-gradle@v4.4.3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install Android SDK (manual)
        run: |
          set -euo pipefail
          SDK="${ANDROID_SDK_ROOT}"
          mkdir -p "$SDK"
          cd "$SDK"
          URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
          curl -fsSL "$URL" -o cmdtools.zip
          rm -rf cmdline-tools || true
          unzip -q cmdtools.zip -d "$SDK"
          mkdir -p "$SDK/cmdline-tools/latest"
          mv "$SDK/cmdline-tools"/* "$SDK/cmdline-tools/latest/" || true
          echo "$SDK/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK/platform-tools" >> $GITHUB_PATH
          echo "$SDK/build-tools/${{ env.BUILD_TOOLS }}" >> $GITHUB_PATH
          set +o pipefail
          yes | "$SDK/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          status=${PIPESTATUS[1]}; if [[ $status -ne 0 && $status -ne 141 ]]; then exit $status; fi
          set -o pipefail
          P=("platform-tools" "platforms;android-${{ env.SDK_API }}" "build-tools;${{ env.BUILD_TOOLS }}" "ndk;${{ env.NDK_VER }}")
          "$SDK/cmdline-tools/latest/bin/sdkmanager" --install "${P[@]}" || INSTALL_FAIL=1
          if [[ "${INSTALL_FAIL:-0}" == "1" && "${{ env.SDK_API }}" == "35" ]]; then
            echo "::warning::Fallback auf API 34 / Build-Tools 34.0.0"
            "$SDK/cmdline-tools/latest/bin/sdkmanager" --install "platforms;android-34" "build-tools;34.0.0" || true
            echo "SDK_API=34" >> $GITHUB_ENV
            echo "BUILD_TOOLS=34.0.0" >> $GITHUB_ENV
            echo "$SDK/build-tools/34.0.0" >> $GITHUB_PATH
          fi
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VER }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VER }}" >> $GITHUB_ENV
          "$SDK/platform-tools/adb" version || true
          "$SDK/build-tools/${{ env.BUILD_TOOLS }}/apksigner" --version || true

      - name: Setup CMake (requested)
        continue-on-error: true
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_REQ }}
      - name: Setup CMake (fallback)
        if: ${{ steps.dispatch.outputs.bundle != '' }}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_FALLBACK }}
      - name: CMake Version Info
        run: cmake --version || true

      - name: Sanitizer/Overrides (config_json)
        if: ${{ github.event.inputs.config_json != '' }}
        run: |
          python3 - <<'PY'
          import os, sys, json, base64, re, pathlib
          raw = os.environ.get("CFG","").strip()
          if raw.startswith("base64:"):
              raw = base64.b64decode(raw.split(":",1)[1]).decode("utf-8","ignore")
          raw = raw.replace("\r\n","\n").replace("\r","\n").strip()
          if not raw:
              sys.exit(0)
          try:
              cfg = json.loads(raw)
          except Exception as e:
              print("::warning::config_json ist kein valides JSON:", e)
              sys.exit(0)
          root = pathlib.Path(".").resolve()
          def safe_path(p):
              p = (root / p).resolve()
              if str(p).startswith(str(root)):
                  return p
              raise ValueError("Unsicherer Pfad")
          for w in cfg.get("writes", []):
              p = safe_path(w["path"])
              p.parent.mkdir(parents=True, exist_ok=True)
              p.write_text(w.get("content",""), encoding="utf-8")
          for r in cfg.get("replacements", []):
              p = safe_path(r["path"])
              if not p.exists():
                  print(f"::notice::{p} existiert nicht – Überspringe Replacement"); continue
              s = p.read_text(encoding="utf-8", errors="ignore")
              flags = 0
              for f in str(r.get("flags","")).split("|"):
                  f=f.strip().upper()
                  flags |= getattr(re, f, 0)
              pat = r.get("pattern","")
              if re.search(r"\\(?![AbBdDsSwWZ\\])", pat):
                  print(f"::warning::Backslash-Leiche in Pattern: {pat[:40]}… – versuche Escape-Heilung")
                  pat = pat.encode("utf-8").decode("unicode_escape")
              try:
                  rx = re.compile(pat, flags)
              except re.error as e:
                  print(f"::warning::Ungültiges Regex: {e} – überspringe")
                  continue
              repl = r.get("repl","")
              s2, n = rx.subn(repl, s)
              if n>0:
                  p.write_text(s2, encoding="utf-8")
                  print(f"::notice::{p} – {n} Ersetzungen")
          for d in cfg.get("deletes", []):
              p = safe_path(d)
              try:
                  if p.is_file(): p.unlink()
                  elif p.is_dir():
                      print(f"::warning::Verzeichnislöschen nicht erlaubt: {p}")
              except Exception as e:
                  print(f"::warning::Delete fehlgeschlagen für {p}: {e}")
          envf = os.environ.get("GITHUB_ENV")
          if envf:
              with open(envf, "a", encoding="utf-8") as f:
                  v = cfg.get("pr_annotations")
                  if isinstance(v, bool):
                      f.write(f"PR_ANNOTATIONS={'true' if v else 'false'}\n")
                  v = cfg.get("debug_tmate")
                  if isinstance(v, bool):
                      f.write(f"DEBUG_TMATE={'true' if v else 'false'}\n")
          PY
        env:
          CFG: ${{ github.event.inputs.config_json }}

      - name: ABI / Splits konfigurieren
        run: |
          case "${{ github.event.inputs.abis }}" in
            arm64+v7a) echo "ORG_GRADLE_PROJECT_abiFilters=arm64-v8a,armeabi-v7a" >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            arm64)     echo "ORG_GRADLE_PROJECT_abiFilters=arm64-v8a"             >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            v7a)       echo "ORG_GRADLE_PROJECT_abiFilters=armeabi-v7a"           >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            universal) echo "ORG_GRADLE_PROJECT_abiFilters="                      >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=false" >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=true"  >> $GITHUB_ENV;;
          esac

      - name: Decode Keystore (optional)
        if: ${{ github.event.inputs.sign_apk == 'true' }}
        env:
          KS_B64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
        run: |
          python3 - <<'PY'
          import os, base64, pathlib
          s=os.environ.get("KS_B64","").strip()
          if s:
            if "base64," in s: s=s.split("base64:",1)[-1]
            s="".join(s.split()); pad='='*(-len(s)%4)
            pathlib.Path("release.keystore").write_bytes(base64.b64decode(s+pad))
            print("DECODE_OK")
          else:
            print("EMPTY_SECRET")
          PY
          if [[ -f release.keystore ]]; then
            {
              echo "MYAPP_UPLOAD_STORE_FILE=$PWD/release.keystore"
              echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_SIGNING_KEYSTORE_PASSWORD }}"
              echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_SIGN_KEY_ALIAS || secrets.ANDROID_SIGNING_KEY_ALIAS }}"
              echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}"
            } >> $GITHUB_ENV
          else
            echo "::warning::Keystore fehlt – Build läuft UNSIGNIERT."
          fi

      - name: ccache (NDK)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
          key: ccache-${{ runner.os }}-ndk${{ env.NDK_VER }}-sdk${{ env.SDK_API }}-bt${{ env.BUILD_TOOLS }}-${{ hashFiles('scripts/build_tdlib_android.sh') }}
          restore-keys: |
            ccache-${{ runner.os }}-ndk${{ env.NDK_VER }}-
            ccache-${{ runner.os }}-

      - name: TDLib cache
        id: cache-tdlib
        uses: actions/cache@v4
        with:
          path: |
            libtd/src/main/jniLibs/**/libtdjni.so
            libtd/src/main/java/org/drinkless/tdlib/TdApi.java
            libtd/src/main/java/org/drinkless/tdlib/Client.java
            libtd/.tdlib_meta
            libtd/TDLIB_VERSION.txt
          key: tdlib-${{ runner.os }}-ndk${{ env.NDK_VER }}-abi-${{ github.event.inputs.abis }}-${{ hashFiles('scripts/build_tdlib_android.sh', 'scripts/**/*.patch') }}
          restore-keys: |
            tdlib-${{ runner.os }}-ndk${{ env.NDK_VER }}-
            tdlib-${{ runner.os }}-

      - name: Need TDLib?
        id: tdneed
        run: |
          need="${{ github.event.inputs.rebuild_tdlib }}"
          for f in libtd/src/main/jniLibs/arm64-v8a/libtdjni.so libtd/TDLIB_VERSION.txt; do
            [[ -f "$f" ]] || need="true"
          done
          echo "need=$need" >> $GITHUB_OUTPUT

      - name: TDLib ABI-Flags bestimmen (für Script)
        id: tdabi
        run: |
          case "${{ github.event.inputs.abis }}" in
            arm64+v7a|universal) echo "flags="               >> $GITHUB_OUTPUT ;;
            arm64)               echo "flags=--only-arm64"   >> $GITHUB_OUTPUT ;;
            v7a)                 echo "flags=--only-v7a"     >> $GITHUB_OUTPUT ;;
          esac

      - name: TDLib Build Deps (if needed)
        if: ${{ steps.tdneed.outputs.need == 'true' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends build-essential ninja-build gperf ccache pkg-config zlib1g-dev libssl-dev python3 git binutils

      - name: Build TDLib (on-demand + Version/BuildType per Picker)
        if: ${{ steps.tdneed.outputs.need == 'true' }}
        env:
          CCACHE_DIR: ~/.cache/ccache
          CCACHE_MAXSIZE: 2G
        run: |
          set -euo pipefail
          command -v ccache >/dev/null 2>&1 && {
            mkdir -p "$CCACHE_DIR"
            ccache --set-config=max_size=${CCACHE_MAXSIZE}
            ccache --set-config=compression=true
            export CC="ccache clang"; export CXX="ccache clang++"
            export CMAKE_C_COMPILER_LAUNCHER=ccache
            export CMAKE_CXX_COMPILER_LAUNCHER=ccache
          } || true

          chmod +x scripts/build_tdlib_android.sh

          if [[ "${{ github.event.inputs.tdlib_build_type }}" == "Release" ]]; then
            BTFLAG="--release"
          else
            BTFLAG="--minsize"
          fi

          case "${{ github.event.inputs.tdlib_mode }}" in
            default)
              bash scripts/build_tdlib_android.sh ${{ steps.tdabi.outputs.flags }} $BTFLAG --api-level=${{ env.SDK_API }}
              ;;
            latest-tag)
              bash scripts/build_tdlib_android.sh ${{ steps.tdabi.outputs.flags }} $BTFLAG --latest-tag --api-level=${{ env.SDK_API }}
              ;;
            ref)
              REF="${{ github.event.inputs.tdlib_ref }}"
              if [[ -z "$REF" ]]; then echo "::error::tdlib_ref ist leer"; exit 1; fi
              bash scripts/build_tdlib_android.sh ${{ steps.tdabi.outputs.flags }} $BTFLAG --ref "$REF" --api-level=${{ env.SDK_API }}
              ;;
          esac

      - name: Android Lint (optional)
        if: ${{ env.PR_ANNOTATIONS == 'true' }}
        run: |
          if [[ "${{ github.event.inputs.build_type }}" == "release" ]]; then
            ./gradlew :app:lintRelease --stacktrace || true
          else
            ./gradlew :app:lintDebug --stacktrace || true
          fi

      - name: Reviewdog (TODOs / Grep) – nicht blockierend
        if: ${{ env.PR_ANNOTATIONS == 'true' }}
        uses: reviewdog/action-setup@v1
      - name: Reviewdog run
        if: ${{ env.PR_ANNOTATIONS == 'true' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          (git ls-files | xargs -I{} grep -nH "TODO" "{}" || true) \
            | reviewdog -name="TODO Scanner" -f=grep -reporter=github-check -level=info -filter-mode=nofilter -fail-on-error=false

      - name: Task wählen
        id: task
        run: |
          case "${{ github.event.inputs.build_type }}" in
            release) echo "task=:app:assembleRelease" >> $GITHUB_OUTPUT ;;
            *)       echo "task=:app:assembleDebug"   >> $GITHUB_OUTPUT ;;
          esac

      - name: Problem-Matcher
        continue-on-error: true
        run: |
          [[ -f .github/gradle-problem-matcher.json ]] && echo "::add-matcher::.github/gradle-problem-matcher.json" || true

      - name: Build
        run: |
          MIRROR="${{ github.event.inputs.mirror_only || 'false' }}"
          if [[ "$MIRROR" == "true" ]]; then OBX_DEFAULT=false; else OBX_DEFAULT=true; fi
          ./gradlew ${{ steps.task.outputs.task }} \
            -PabiFilters="${{ env.ORG_GRADLE_PROJECT_abiFilters }}" \
            -PuniversalApk="${{ env.ORG_GRADLE_PROJECT_universalApk }}" \
            -PuseSplits="${{ env.ORG_GRADLE_PROJECT_useSplits }}" \
            -PTG_OBX_ENABLED_DEFAULT=${OBX_DEFAULT} \
            --configuration-cache --build-cache --parallel \
            --stacktrace --warning-mode all -x test

      - name: apksigner verify (falls signiert)
        if: ${{ github.event.inputs.sign_apk == 'true' }}
        run: |
          find app/build/outputs/apk -type f -name "*.apk" -print0 | xargs -0 -I{} bash -c '$ANDROID_SDK_ROOT/build-tools/${{ env.BUILD_TOOLS }}/apksigner verify --verbose "{}" || true'

      - name: Checksums & Kontext
        run: |
          { find app/build/outputs/apk -type f -name "*.apk" -print0 | xargs -0 sha256sum || true; } > checksums.txt
          echo "Build type  : ${{ github.event.inputs.build_type }}"
          echo "ABIs        : ${{ env.ORG_GRADLE_PROJECT_abiFilters || 'universal' }}"
          echo "API/BT/NDK  : ${{ env.SDK_API }}/${{ env.BUILD_TOOLS }}/${{ env.NDK_VER }}"
          echo "TDLib mode  : ${{ github.event.inputs.tdlib_mode }}  (BT=${{ github.event.inputs.tdlib_build_type }})"

      - name: Artefakte hochladen (APK + mapping)
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ github.event.inputs.build_type }}-${{ github.event.inputs.abis }}
          path: |
            app/build/outputs/apk/**/**/*.apk
            app/build/outputs/mapping/**/mapping.txt
            checksums.txt
          retention-days: 14
          if-no-files-found: error

      - name: TDLib Artefakte (wenn neu gebaut)
        if: ${{ steps.tdneed.outputs.need == 'true' || steps.cache-tdlib.outputs.cache-hit != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: tdlib-build-${{ github.run_id }}
          path: |
            libtd/TDLIB_VERSION.txt
            libtd/.tdlib_meta
            libtd/src/main/jniLibs/**/libtdjni.so
            libtd/src/main/java/org/drinkless/tdlib/{TdApi.java,Client.java}
          retention-days: 14
          if-no-files-found: warn

      - name: Build Summary
        if: always()
        run: |
          {
            echo "## Android Build – Zusammenfassung"
            echo ""
            echo "**Run:** https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo ""
            echo "### APKs"
            find app/build/outputs/apk -type f -name "*.apk" | sed 's/^/- /' || echo "- (keine gefunden)"
            echo ""
            echo "### mapping.txt"
            find app/build/outputs/mapping -type f -name "mapping.txt" | sed 's/^/- /' || true
            echo ""
            echo "### Checksums"
            sed 's/^/- /' checksums.txt || true
          } >> "$GITHUB_STEP_SUMMARY"

      - name: tmate (on failure or opt-in)
        if: ${{ failure() || env.DEBUG_TMATE == 'true' }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: false
          hostname: lon1.tmate.io
