name: Codex – ContextMap (Bot 1)

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created, edited]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: write   # erlaubt repository_dispatch im eigenen Repo

# Verhindert parallele Doppel-Läufe für dasselbe Issue
concurrency:
  group: codex-contextmap-${{ github.event_name }}-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

jobs:
  contextmap:
    # Loop-Schutz: nicht erneut laufen, wenn unser eigener Bot kommentiert hat
    if: ${{ !(github.event_name == 'issue_comment' && github.actor == 'github-actions[bot]') }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/codex/requirements.txt

      - name: Run Bot 1 (ContextMap)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          # Verhalten steuerbar:
          CODEX_POST_ISSUE_COMMENT: 'true'      # Kurz-Zusammenfassung in den Issue schreiben
          CODEX_ADD_LABEL: 'true'               # Label "contextmap-ready" setzen
          CODEX_NOTIFY_SOLVER: 'true'           # repository_dispatch an Bot 2 versuchen
        run: |
          mkdir -p .github/codex/context
          python .github/codex/bot_contextmap.py

      - name: Upload context artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: codex-context
          path: |
            .github/codex/context/**