name: Release (APK/AAB)

on:
  workflow_dispatch:
    inputs:
      versionName:
        required: true
        type: string
      versionCode:
        required: true
        type: string
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - uses: android-actions/setup-android@v3

      - uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      # Ensure gradlew is runnable on Linux runners (and not CRLF)
      - name: Fix gradlew permissions
        run: |
          chmod +x ./gradlew
          sed -i 's/\r$//' gradlew

      # Decode keystore & write signing props if secrets are present
      - name: Prepare signing
        if: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 != '' }}
        env:
          ANDROID_SIGNING_KEYSTORE_BASE64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
          ANDROID_SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
          ANDROID_SIGNING_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASSWORD }}
        run: |
          echo "$ANDROID_SIGNING_KEYSTORE_BASE64" | base64 -d > "$HOME/keystore.jks"
          mkdir -p "$HOME/.gradle"
          {
            echo "MYAPP_UPLOAD_STORE_FILE=$HOME/keystore.jks"
            echo "MYAPP_UPLOAD_KEY_ALIAS=$ANDROID_SIGNING_KEY_ALIAS"
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$ANDROID_SIGNING_KEYSTORE_PASSWORD"
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$ANDROID_SIGNING_KEY_PASSWORD"
          } >> "$HOME/.gradle/gradle.properties"

      - name: Build Release (APK + AAB)
        shell: bash
        run: |
          ARGS=()
          # Pass version overrides when triggered via workflow_dispatch
          if [[ -n "${{ inputs.versionName }}" ]]; then ARGS+=("-PversionName=${{ inputs.versionName }}"); fi
          if [[ -n "${{ inputs.versionCode }}" ]]; then ARGS+=("-PversionCode=${{ inputs.versionCode }}"); fi
          ./gradlew -S --no-daemon --build-cache bundleRelease assembleRelease "${ARGS[@]}"

      - uses: actions/upload-artifact@v4
        with:
          name: fishit-player-release
          path: |
            **/build/outputs/apk/release/*.apk
            **/build/outputs/bundle/release/*.aab
            **/build/outputs/mapping/release/mapping.txt

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${GITHUB_REF#refs/tags/}" \
            **/build/outputs/apk/release/*.apk \
            **/build/outputs/bundle/release/*.aab \
            --notes "fishit-player release ${GITHUB_REF#refs/tags/}"