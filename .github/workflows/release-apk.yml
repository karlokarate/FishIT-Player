name: release-apk

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type: debug or release"
        required: false
        default: "release"
        type: choice
        options: ["debug", "release"]
      abis:
        description: "ABIs (comma separated): arm64-v8a,armeabi-v7a,universal"
        required: false
        default: "arm64-v8a,armeabi-v7a"
      ignore_missing_tdlib_v7a:
        description: "Ignore missing v7a TDLib (true/false)"
        required: false
        default: "false"
      issue:
        description: "Issue number (optional, used by Bot 3 to map logs)"
        required: false
        default: ""

permissions:
  contents: read
  actions: read

jobs:
  build:
    name: Build ${{ inputs.build_type }} (${{ inputs.abis }})
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ inputs.build_type }}
      ABIS: ${{ inputs.abis }}
      IGNORE_TDLIB_V7A: ${{ inputs.ignore_missing_tdlib_v7a }}
      ISSUE_NUMBER: ${{ inputs.issue }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & Install Platform/Build-Tools
        run: |
          yes | sdkmanager --licenses
          # bevorzugt API 35; fallback 34
          sdkmanager "platforms;android-35" "build-tools;35.0.0" || true
          sdkmanager "platforms;android-34" "build-tools;34.0.0" || true

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Prepare build matrix info
        id: prep
        run: |
          echo "ISSUE_NUMBER=${ISSUE_NUMBER}"
          if [ -n "${ISSUE_NUMBER}" ]; then
            echo "issue:#${ISSUE_NUMBER}"
          fi
          # Gradle tasks
          if [ "${BUILD_TYPE}" = "release" ]; then
            echo "TASK=:app:assembleRelease" >> $GITHUB_OUTPUT
          else
            echo "TASK=:app:assembleDebug" >> $GITHUB_OUTPUT
          fi
          # Simple ABI hint (falls im Projekt genutzt)
          echo "ABI_FLAGS=${ABIS}" >> $GITHUB_OUTPUT

      - name: Show Gradle version
        run: ./gradlew --version

      - name: Build (${{ steps.prep.outputs.TASK }})
        id: build
        # Falls der Build scheitert, wollen wir, dass der Workflow 'failure' liefert -> Bot 3 reagiert.
        run: |
          set -o pipefail
          # Marker in Log schreiben (für Bot 3 Zuordnung)
          if [ -n "${ISSUE_NUMBER}" ]; then
            echo "ISSUE_NUMBER=${ISSUE_NUMBER}"
            echo "issue:#${ISSUE_NUMBER}"
          fi
          # Optionale ABI-Flags via Gradle-Property, falls verwendet (projektabhängig)
          ./gradlew --no-daemon --stacktrace -Pcodex.abis="${ABIS}" ${{ steps.prep.outputs.TASK }} 2>&1 | tee gradle_build.log

      - name: Collect APK/AAB artifacts
        if: always()
        run: |
          mkdir -p artifacts
          # APKs (debug/release) – passe Pfade ggf. an dein Projekt an
          find . -type f -path "*/build/outputs/apk/*/*.apk" -exec cp -v {} artifacts/ \; || true
          # Bundles
          find . -type f -path "*/build/outputs/bundle/*/*.aab" -exec cp -v {} artifacts/ \; || true
          # Mapping
          find . -type f -path "*/build/outputs/mapping/*/mapping.txt" -exec cp -v {} artifacts/ \; || true
          # Gradle log
          cp -v gradle_build.log artifacts/ || true

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.run_id }}-${{ inputs.build_type }}
          path: artifacts
          if-no-files-found: warn

      - name: Fail if task failed
        if: failure()
        run: |
          echo "::error::Build failed. Artifacts and logs have been uploaded."
          exit 1
