name: Android -- FishITPlayer (arm64 + v7a)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build-Variante (debug | release)"
        required: false
        default: "debug"
      version_code:
        description: "Optional: versionCode (überschreibt Gradle)"
        required: false
        default: ""
      version_name:
        description: "Optional: versionName (überschreibt Gradle)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build-multiabi:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      ORG_GRADLE_PROJECT_abiFilters: arm64-v8a,armeabi-v7a
      ORG_GRADLE_PROJECT_universalApk: false
      ORG_GRADLE_PROJECT_useSplits: true

    steps:
      - name: Checkout (mit LFS & Submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # compileSdk/targetSdk = 36 ⇒ API 36 + Build-Tools 36
      - name: Set up Android SDK/NDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 36
          build-tools: 36.0.0
          ndk-version: 26.3.11579264
          cmake-version: 3.22.1

      - name: Export ANDROID_NDK_HOME/ROOT
        run: |
          NDK_DIR="$ANDROID_SDK_ROOT/ndk/26.3.11579264"
          echo "ANDROID_NDK_HOME=$NDK_DIR"  >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$NDK_DIR"  >> $GITHUB_ENV

      - name: System-Deps für TDLib
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential ninja-build gperf ccache pkg-config \
            zlib1g-dev libssl-dev python3 git ca-certificates ripgrep

      - name: Gradle Cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew ausführbar
        run: chmod +x ./gradlew

      # === Secrets → Env (Signing + TG + HEADER) ===
      # Smarter Decoder: entfernt data:*-Präfixe, Quotes/Backticks, whitespace;
      # versucht Rohwert, dann längsten Base64-Substring; Standard + URL-safe + Padding-Fix.
      - name: Decode & Setup Signing + App Secrets
        shell: bash
        run: |
          python3 - <<'PY'
import os, re, base64, binascii, sys, pathlib
raw = os.environ.get("KS_B64","")
def normalize(s:str)->str:
    # entferne umschließende Backticks/Quotes
    s = s.strip()
    if (s.startswith(("'''",'"""')) and s.endswith(("'''",'"""'))) or (s[0]==s[-1] and s[0] in "'\"`"):
        s = s[1:-1]
    # data:*;base64, Präfix entfernen
    if "base64," in s:
        s = s.split("base64,",1)[1]
    # whitespace entfernen
    return "".join(s.split())

def try_decode(candidate:str):
    for fn in (base64.b64decode, base64.urlsafe_b64decode):
        try:
            pad = '=' * (-len(candidate) % 4)
            return fn(candidate + pad)
        except binascii.Error:
            pass
    return None

decoded = None
norm = normalize(raw)
candidates = []
if norm:
    candidates.append(norm)

# Fallback: längsten Base64-ähnlichen Substring extrahieren
# erlaubt + / _ - = Zeichen
if not candidates or not try_decode(candidates[0]):
    substrs = re.findall(r'[A-Za-z0-9_/\+\-=]{64,}', raw)
    if substrs:
        longest = max(substrs, key=len)
        candidates.append(normalize(longest))

for c in candidates:
    decoded = try_decode(c)
    if decoded:
        break

if decoded:
    pathlib.Path("release.keystore").write_bytes(decoded)
    print("DECODE_OK")
else:
    print("DECODE_FAIL")
PY
          if [[ -f "release.keystore" ]]; then
            echo "MYAPP_UPLOAD_STORE_FILE=$PWD/release.keystore" >> $GITHUB_ENV
            echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_SIGNING_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
            echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" >> $GITHUB_ENV
            echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> $GITHUB_ENV
            echo "Keystore: OK (signierte Releases möglich)"
          else
            echo "::warning::Keystore-Secret ungültig/unklar – fallback auf UNSIGNIERTEN Build."
          fi

          # Telegram / Header (Gradle liest ENV → buildConfigFields)
          [[ -n "${{ secrets.TG_API_ID }}"   ]] && echo "TG_API_ID=${{ secrets.TG_API_ID }}"     >> $GITHUB_ENV
          [[ -n "${{ secrets.TG_API_HASH }}" ]] && echo "TG_API_HASH=${{ secrets.TG_API_HASH }}" >> $GITHUB_ENV
          [[ -n "${{ secrets.HEADER }}"     ]] && echo "HEADER=${{ secrets.HEADER }}"           >> $GITHUB_ENV
        env:
          KS_B64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}

      # ---- TDLib: arm64 + v7a bauen; Script legt .so in libtd/src/main/jniLibs/... ab
      - name: TDLib (arm64 + v7a) bauen
        run: |
          chmod +x scripts/tdlib-build-arm64.sh
          # Ohne Flags => baut beide ABIs (arm64 & v7a)
          bash scripts/tdlib-build-arm64.sh

      - name: Sanity-Check TDLib Artefakte
        run: |
          ls -lah libtd/src/main/jniLibs/arm64-v8a/ || (echo "arm64-v8a fehlt" && exit 1)
          ls -lah libtd/src/main/jniLibs/armeabi-v7a/ || (echo "armeabi-v7a fehlt" && exit 1)

      - name: Gradle Task bestimmen
        id: task
        shell: bash
        run: |
          case "${{ github.event.inputs.build_type }}" in
            release) echo "task=:app:assembleRelease" ;;
            *)       echo "task=:app:assembleDebug" ;;
          esac >> "$GITHUB_OUTPUT"

      - name: Build (Split-APKs je ABI)
        run: |
          EXTRA_PROPS=()
          if [[ -n "${{ github.event.inputs.version_code }}" ]]; then
            EXTRA_PROPS+=("-PversionCode=${{ github.event.inputs.version_code }}")
          fi
          if [[ -n "${{ github.event.inputs.version_name }}" ]]; then
            EXTRA_PROPS+=("-PversionName=${{ github.event.inputs.version_name }}")
          fi

          ./gradlew ${{ steps.task.outputs.task }} \
            -PabiFilters="${{ env.ORG_GRADLE_PROJECT_abiFilters }}" \
            -PuniversalApk="${{ env.ORG_GRADLE_PROJECT_universalApk }}" \
            -PuseSplits="${{ env.ORG_GRADLE_PROJECT_useSplits }}" \
            "${EXTRA_PROPS[@]}" \
            -x test --no-daemon --stacktrace

      - name: APKs finden (arm64 & v7a)
        id: apks
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t ARM64 < <(find app -type f -path "*/build/outputs/apk/*/*" -name "*arm64-v8a*.apk" -print | sort)
          mapfile -t V7A   < <(find app -type f -path "*/build/outputs/apk/*/*" -name "*armeabi-v7a*.apk" -print | sort)

          [[ ${#ARM64[@]} -gt 0 ]] || { echo "::error::Keine arm64-APK gefunden"; exit 1; }
          [[ ${#V7A[@]}   -gt 0 ]] || { echo "::error::Keine v7a-APK gefunden";   exit 1; }

          printf '%s\n' "${ARM64[@]}" > "${{ runner.temp }}/apk_arm64.txt"
          printf '%s\n' "${V7A[@]}"   > "${{ runner.temp }}/apk_v7a.txt"

          echo "Gefundene arm64 APKs:"
          printf ' - %s\n' "${ARM64[@]}"
          echo "Gefundene v7a APKs:"
          printf ' - %s\n' "${V7A[@]}"

      - name: Upload APK (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: fishitplayer-${{ github.event.inputs.build_type || 'debug' }}-arm64
          path: |
            ${{ runner.temp }}/apk_arm64.txt
            app/build/outputs/apk/**/**/*arm64-v8a*.apk

      - name: Upload APK (v7a)
        uses: actions/upload-artifact@v4
        with:
          name: fishitplayer-${{ github.event.inputs.build_type || 'debug' }}-v7a
          path: |
            ${{ runner.temp }}/apk_v7a.txt
            app/build/outputs/apk/**/**/*armeabi-v7a*.apk

      - name: Build Kontext
        run: |
          echo "Build type  : ${{ github.event.inputs.build_type || 'debug' }}"
          echo "versionCode : ${{ github.event.inputs.version_code || '(unverändert)' }}"
          echo "versionName : ${{ github.event.inputs.version_name || '(unverändert)' }}"
          echo "ABI-Splits  : ${{ env.ORG_GRADLE_PROJECT_abiFilters }}"
          echo "Universal   : ${{ env.ORG_GRADLE_PROJECT_universalApk }}"
          echo "useSplits   : ${{ env.ORG_GRADLE_PROJECT_useSplits }}"