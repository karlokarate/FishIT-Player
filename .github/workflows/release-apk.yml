name: Android – Build APK

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build-Variante (debug | release)"
        required: false
        default: "debug"
      issue:
        description: "Issue-Nummer (optional, nur Info)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      # (Optional) Keystore aus Secret decodieren – nur wenn Secret vorhanden
      - name: Prepare signing (optional)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        env:
          KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          STORE_PW: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PW: ${{ secrets.ANDROID_KEY_PASSWORD }}
          RTEMP: ${{ runner.temp }}
        shell: bash
        run: |
          set -euo pipefail
          ANDROID_KEYSTORE_PATH="$RTEMP/android-upload-keystore.jks"
          GRADLE_PROPS="$RTEMP/gradle.properties"
          echo "$KEYSTORE_B64" | base64 -d > "$ANDROID_KEYSTORE_PATH"
          {
            echo "storeFile=$ANDROID_KEYSTORE_PATH"
            echo "storePassword=$STORE_PW"
            echo "keyAlias=$KEY_ALIAS"
            echo "keyPassword=$KEY_PW"
            # alternative Property-Namen (falls im build.gradle(.kts) erwartet)
            echo "MYAPP_UPLOAD_STORE_FILE=$ANDROID_KEYSTORE_PATH"
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$STORE_PW"
            echo "MYAPP_UPLOAD_KEY_ALIAS=$KEY_ALIAS"
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$KEY_PW"
          } >> "$GRADLE_PROPS"
          echo "ANDROID_KEYSTORE_PATH=$ANDROID_KEYSTORE_PATH" >> $GITHUB_ENV
          echo "GRADLE_PROPS=$GRADLE_PROPS" >> $GITHUB_ENV

      - name: Install gradle.properties (optional)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.gradle
          if [[ -n "${GRADLE_PROPS:-}" && -f "$GRADLE_PROPS" ]]; then
            cat "$GRADLE_PROPS" >> ~/.gradle/gradle.properties
            echo "Wrote signing props to ~/.gradle/gradle.properties"
          else
            echo "No signing props present; skipping"
          fi

      - name: Compute Gradle task
        id: task
        shell: bash
        run: |
          set -euo pipefail
          BT="${{ github.event.inputs.build_type }}"
          if [[ "$BT" == "release" || "$BT" == "Release" ]]; then
            echo "task=assembleRelease" >> $GITHUB_OUTPUT
          else
            echo "task=assembleDebug" >> $GITHUB_OUTPUT
          fi
          echo "Using task=$(cat $GITHUB_OUTPUT)"

      - name: Build APK
        run: ./gradlew ${{ steps.task.outputs.task }} -x test --no-daemon --stacktrace

      - name: Locate APKs
        id: apks
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find app -type f -path "*/build/outputs/apk/*/*.apk" -print | sort)
          if [[ ${#FILES[@]} -eq 0 ]]; then
            echo "Keine APK gefunden." >&2
            exit 1
          fi
          printf 'APK: %s
' "${FILES[@]}"
          # For artifact upload, we output a newline list into a known temp file:
          echo "RTEMP=${{ runner.temp }}" >> $GITHUB_OUTPUT
          printf '%s
' "${FILES[@]}" > "${{ runner.temp }}/apk_list.txt"

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ github.event.inputs.build_type || 'debug' }}
          path: |
            ${{ runner.temp }}/apk_list.txt
            app/build/outputs/apk/**/**/*.apk

      - name: Build Context Info (optional)
        if: ${{ github.event.inputs.issue != '' }}
        run: |
          echo "Issue: #${{ github.event.inputs.issue }}"
          echo "Build type: ${{ github.event.inputs.build_type || 'debug' }}"
