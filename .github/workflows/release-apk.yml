name: Android â€“ Build APK

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build-Variante (debug | release)"
        required: false
        default: "debug"
      issue:
        description: "Issue-Nummer (optional, nur Info)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Compute Gradle task
        id: task
        shell: bash
        run: |
          case "${{ github.event.inputs.build_type }}" in
            release) echo "task=:app:assembleRelease" ;;
            *) echo "task=:app:assembleDebug" ;;
          esac | tee -a "$GITHUB_OUTPUT"

      - name: Build APK
        run: ./gradlew ${{ steps.task.outputs.task }} -x test --no-daemon --stacktrace

      - name: Locate APKs
        id: apks
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find app -type f -path "*/build/outputs/apk/*/*.apk" -print | sort)
          if [[ ${#FILES[@]} -eq 0 ]]; then
            echo "Keine APK gefunden." >&2
            exit 1
          fi
          printf 'APK: %s\n' "${FILES[@]}"
          printf '%s\n' "${FILES[@]}" > "${{ runner.temp }}/apk_list.txt"

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ github.event.inputs.build_type || 'debug' }}
          path: |
            ${{ runner.temp }}/apk_list.txt
            app/build/outputs/apk/**/**/*.apk

      - name: Build Context Info (optional)
        if: ${{ github.event.inputs.issue != '' }}
        run: |
          echo "Issue: #${{ github.event.inputs.issue }}"
          echo "Build type: ${{ github.event.inputs.build_type || 'debug' }}"
