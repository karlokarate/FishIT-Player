name: Release (APK/AAB)

on:
  workflow_dispatch:
    inputs:
      versionName:
        required: false
        type: string
      versionCode:
        required: false
        type: string
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - name: Fix gradlew permissions
        run: |
          chmod +x ./gradlew
          sed -i 's/\r$//' gradlew || true

      # OPTIONAL: Signieren – erwartet, dass die build.gradle(.kts) diese Properties verwendet
      - name: Prepare signing
        if: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 != '' }}
        env:
          ANDROID_SIGNING_KEYSTORE_BASE64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
          ANDROID_SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
          ANDROID_SIGNING_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASSWORD }}
        run: |
          echo "$ANDROID_SIGNING_KEYSTORE_BASE64" | base64 -d > "$HOME/keystore.jks"
          mkdir -p "$HOME/.gradle"
          {
            echo "MYAPP_UPLOAD_STORE_FILE=$HOME/keystore.jks"
            echo "MYAPP_UPLOAD_KEY_ALIAS=$ANDROID_SIGNING_KEY_ALIAS"
            echo "MYAPP_UPLOAD_STORE_PASSWORD=$ANDROID_SIGNING_KEYSTORE_PASSWORD"
            echo "MYAPP_UPLOAD_KEY_PASSWORD=$ANDROID_SIGNING_KEY_PASSWORD"
          } >> "$HOME/.gradle/gradle.properties"

      - name: Build Release (AAB + APKs incl. splits & universal)
        shell: bash
        run: |
          ARGS=()
          # Optional Versionsüberschreibung
          if [[ -n "${{ inputs.versionName }}" ]]; then ARGS+=("-PversionName=${{ inputs.versionName }}"); fi
          if [[ -n "${{ inputs.versionCode }}" ]]; then ARGS+=("-PversionCode=${{ inputs.versionCode }}"); fi
          # Build: AAB + APKs. Splits/Universal werden über Gradle-Konfiguration gesteuert.
          ./gradlew -S --no-daemon --build-cache \
            bundleRelease assembleRelease "${ARGS[@]}"

      - name: List produced files (debug)
        run: |
          echo "=== APKs ==="
          ls -lah **/build/outputs/apk/release/*.apk || true
          ls -lah **/build/outputs/apk/*/release/*.apk || true   # split APKs in ABI-Unterordnern
          echo "=== AABs ==="
          ls -lah **/build/outputs/bundle/release/*.aab || true
          echo "=== ProGuard/R8 mapping ==="
          ls -lah **/build/outputs/mapping/release/mapping.txt || true

      - name: Upload build artifacts (APKs + AAB + mapping)
        uses: actions/upload-artifact@v4
        with:
          name: fishit-player-release
          path: |
            **/build/outputs/apk/release/*.apk         # universal APK (falls aktiviert)
            **/build/outputs/apk/*/release/*.apk       # split APKs (arm64-v8a, armeabi-v7a, …)
            **/build/outputs/bundle/release/*.aab
            **/build/outputs/mapping/release/mapping.txt
          if-no-files-found: warn
          retention-days: 14

      - name: Create GitHub Release (for tag runs)
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          # Robust sammeln der Assets (APKs/AAB/Mapping)
          mapfile -t FILES < <( \
            find . -type f \( \
              -path "*/build/outputs/apk/release/*.apk" -o \
              -path "*/build/outputs/apk/*/release/*.apk" -o \
              -path "*/build/outputs/bundle/release/*.aab" -o \
              -path "*/build/outputs/mapping/release/mapping.txt" \
            \) | sort )
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists, uploading assets…"
            for f in "${FILES[@]}"; do gh release upload "$TAG" "$f" --clobber; done
          else
            echo "Creating release $TAG…"
            gh release create "$TAG" "${FILES[@]}" \
              --title "$TAG" \
              --notes "fishit-player release $TAG"
          fi
