name: Android – Quick Debug (fast/no-sign)

on:
  workflow_dispatch:
    inputs:
      abis:
        description: "ABIs (Splits/Universal)"
        type: choice
        required: true
        default: "arm64+v7a"
        options: [arm64+v7a, arm64, v7a, universal]
      debug_tmate:
        description: "tmate-Debug"
        type: choice
        default: "false"
        options: ["false","true"]
      config_json:
        description: "JSON-Overrides (sdk_api, build_tools, jdk, use_gradle_9x, gradle_9x_version, agp_override, kotlin_override, pr_comment, issue_number)"
        required: false
        default: "{}"

permissions:
  contents: read

concurrency:
  group: android-fast-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  assemble-debug:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Parse config overrides
        id: cfg
        run: |
          python3 - <<'PY'
          import json, os, sys

          defaults = {
              "sdk_api": "36",
              "build_tools": "35.0.0",
              "jdk": "21",
              "use_gradle_9x": "false",
              "gradle_9x_version": "9.1.0",
              "agp_override": "",
              "kotlin_override": "",
              "pr_comment": "false",
              "issue_number": "",
          }

          raw = os.environ.get("RAW_CONFIG", "").strip()
          if not raw:
              data = {}
          else:
              try:
                  data = json.loads(raw)
              except json.JSONDecodeError as exc:
                  print(f"::error::config_json ist kein gültiges JSON ({exc})")
                  sys.exit(1)

          merged = {}
          for key, default in defaults.items():
              value = data.get(key, default)
              if isinstance(value, bool):
                  value = "true" if value else "false"
              else:
                  value = str(value)
              merged[key] = value

          env_path = os.environ["GITHUB_ENV"]
          out_path = os.environ["GITHUB_OUTPUT"]
          with open(env_path, "a", encoding="utf-8") as envf, open(out_path, "a", encoding="utf-8") as outf:
              for key, value in merged.items():
                  envf.write(f"{key}={value}\n")
                  outf.write(f"{key}={value}\n")
          PY
        env:
          RAW_CONFIG: ${{ github.event.inputs.config_json }}

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ steps.cfg.outputs.jdk }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          packages: |
            platform-tools
            platforms;android-${{ steps.cfg.outputs.sdk_api }}
            build-tools;${{ steps.cfg.outputs.build_tools }}

      - name: Setup Gradle (cache+wrapper validation)
        uses: gradle/actions/setup-gradle@v5

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # --- Optional: Gradle/AGP/Kotlin Overrides (nur für diesen Run) ---
      - name: Optional – Gradle 9.x OVERRIDE (Guard prüft AGP)
        if: ${{ steps.cfg.outputs.use_gradle_9x == 'true' }}
        run: |
          set -euo pipefail
          V="${{ steps.cfg.outputs.gradle_9x_version }}"
          [[ -f gradle/wrapper/gradle-wrapper.properties ]] || { echo "::error::gradle-wrapper.properties fehlt"; exit 1; }
          sed -i -E "s#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-${V}-bin.zip#g" gradle/wrapper/gradle-wrapper.properties
          echo "Gradle Wrapper → ${V}"
          AGP="$(grep -RhoE 'com\\.android\\.tools\\.build:gradle:([0-9]+\\.[0-9]+(\\.[0-9]+)?)' -n --include=*.gradle* --exclude-dir=**/build | head -1 | sed -E 's/.*:([0-9.]+).*/\\1/')"
          vergte() { [ "$1" = "$2" ] || [ "$(printf '%s\n%s\n' "$1" "$2" | sort -V | tail -n1)" = "$1" ]; }
          if [[ -n "$AGP" ]] && ! vergte "$AGP" "8.13.0"; then
            echo "::error::Gradle 9.x erfordert AGP >= 8.13 ODER AGP 9 Preview. Setze 'agp_override' entsprechend."
            exit 2
          fi

      - name: Optional – AGP/Kotlin Override (In-Place Patch nur für Run)
        if: ${{ steps.cfg.outputs.agp_override != '' || steps.cfg.outputs.kotlin_override != '' }}
        run: |
          python3 - <<'PY'
          import re, pathlib, os
          agp = os.environ.get("AGP_NEW","").strip()
          kt  = os.environ.get("KOTLIN_NEW","").strip()
          files=[p for p in pathlib.Path(".").rglob("*") if p.is_file() and p.suffix in (".gradle",".kts",".toml") and "build" not in p.parts]
          for p in files:
            s=p.read_text(encoding="utf-8",errors="ignore"); o=s
            if agp:
              s=re.sub(r"(com\.android\.tools\.build:gradle:)\d+\.\d+(?:\.\d+)?", rf"\g<1>{agp}", s)
              s=re.sub(r'(id\(["\']com\.android\.(?:application|library|test|dynamic-feature)["\']\)\s+version\s+")[^"]+(")', rf"\g<1>{agp}\g<2>", s)
              s=re.sub(r'(?m)^(agp\s*=\s*")\d+\.\d+(?:\.\d+)?(")', rf"\g<1>{agp}\g<2>", s)
            if kt:
              s=re.sub(r'(org\.jetbrains\.kotlin:(?:kotlin-gradle-plugin|kotlin-stdlib)[^:]*:)\d+\.\d+(?:\.\d+)?', rf"\g<1>{kt}", s)
              s=re.sub(r'(id\(["\']org\.jetbrains\.kotlin\.(?:android|jvm|multiplatform)["\']\)\s+version\s+")[^"]+(")', rf"\g<1>{kt}\g<2>", s)
              s=re.sub(r'(?m)^(kotlin\s*=\s*")\d+\.\d+(?:\.\d+)?(")', rf"\g<1>{kt}\g<2>", s)
            if s!=o: p.write_text(s,encoding="utf-8")
          PY
        env:
          AGP_NEW: ${{ steps.cfg.outputs.agp_override }}
          KOTLIN_NEW: ${{ steps.cfg.outputs.kotlin_override }}

      # --- ABI / Splits ---
      - name: ABI / Splits konfigurieren
        run: |
          case "${{ github.event.inputs.abis }}" in
            arm64+v7a) echo "ORG_GRADLE_PROJECT_abiFilters=arm64-v8a,armeabi-v7a" >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            arm64)     echo "ORG_GRADLE_PROJECT_abiFilters=arm64-v8a"             >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            v7a)       echo "ORG_GRADLE_PROJECT_abiFilters=armeabi-v7a"           >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            universal) echo "ORG_GRADLE_PROJECT_abiFilters="                      >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=false" >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=true"  >> $GITHUB_ENV;;
          esac

      - name: Gradle Problem-Matcher
        continue-on-error: true
        run: |
          [[ -f .github/gradle-problem-matcher.json ]] && echo "::add-matcher::.github/gradle-problem-matcher.json" || true

      - name: Assemble Debug (ohne Tests)
        run: |
          ./gradlew :app:assembleDebug \
            -PabiFilters="${{ env.ORG_GRADLE_PROJECT_abiFilters }}" \
            -PuniversalApk="${{ env.ORG_GRADLE_PROJECT_universalApk }}" \
            -PuseSplits="${{ env.ORG_GRADLE_PROJECT_useSplits }}" \
            --configuration-cache --build-cache --parallel \
            --stacktrace --warning-mode all -x test

      - name: "Artefakt: APKs"
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ github.event.inputs.abis }}
          path: app/build/outputs/apk/**/**/*.apk
          if-no-files-found: error
          retention-days: 7

      - name: Build Summary
        if: always()
        run: |
          {
            echo "## Artefakte – Quick Debug"
            echo ""
            echo "**Run:** https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo ""
            echo "### APKs"
            find app/build/outputs/apk -type f -name "*.apk" | sed 's/^/- /' || echo "- (keine gefunden)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: PR-Kommentar (optional)
        if: ${{ steps.cfg.outputs.pr_comment == 'true' && (github.event_name == 'pull_request' || steps.cfg.outputs.issue_number != '') }}
        uses: actions/github-script@v8
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const body = ["### ⚙️ Quick Debug fertig", `**Run:** ${runUrl}`, "", "Artefakte: siehe **Artifacts** und **Run Summary**."].join("\n");
            const override = process.env.ISSUE_NUMBER_OVERRIDE?.trim();
            const parsed = override ? Number(override) : undefined;
            const issue_number = context.payload.pull_request?.number ?? (Number.isFinite(parsed) ? parsed : undefined);
            if (issue_number) await github.rest.issues.createComment({ ...context.repo, issue_number, body });
        env:
          ISSUE_NUMBER_OVERRIDE: ${{ steps.cfg.outputs.issue_number }}

      - name: Start tmate (on failure/explicit)
        if: ${{ failure() || github.event.inputs.debug_tmate == 'true' }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true