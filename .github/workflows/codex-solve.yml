name: Codex – Solver (Bot 2)

on:
  workflow_run:
    workflows: ["Codex – ContextMap (Bot 1)"]
    types: [completed]
  issues:
    types: [labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue:
        description: "Issue-Nummer (optional; überschreibt Kontext)"
        required: false
        default: ""
      build_type:
        description: "Optional: Build-Dispatch (debug|release)"
        required: false
        default: ""

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  solve:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true   # wichtig für Pushes in SOLVERBOT/...

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (solver)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f .github/codex/requirements-solver.txt ]; then
            pip install -r .github/codex/requirements-solver.txt
          elif [ -f .github/codex/requirements.txt ]; then
            pip install -r .github/codex/requirements.txt
          else
            pip install 'requests>=2.32.3,<3' 'chardet>=5.2.0,<6' 'openai>=1.40.0,<2' 'unidiff>=0.7.5,<1'
          fi

      - name: Determine ISSUE_NUMBER
        id: issue
        shell: bash
        run: |
          set -euo pipefail
          num=""
          case "${{ github.event_name }}" in
            workflow_run)
              # Versuche, Issue-Nr. aus Branch-Namen oder Context-Datei zu ermitteln
              branch="$(jq -r '.workflow_run.head_branch' "${GITHUB_EVENT_PATH}" 2>/dev/null || true)"
              if [[ "$branch" =~ SOLVERBOT/([0-9]+)/ ]]; then
                num="${BASH_REMATCH[1]}"
              elif [[ -f ".github/codex/context/last_run.json" ]]; then
                num="$(jq -r '.issue_number // empty' ".github/codex/context/last_run.json" || true)"
              fi
              ;;
            issues)
              num="${{ github.event.issue.number }}"
              ;;
            issue_comment)
              num="${{ github.event.issue.number }}"
              ;;
            *)
              num="${{ github.event.inputs.issue }}"
              ;;
          esac

          echo "num=$num" >> "$GITHUB_OUTPUT"
          echo "Derived ISSUE_NUMBER: $num"

      - name: Run Bot 2 (Solver)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL }}
          OPENAI_MODEL_DEFAULT: ${{ vars.OPENAI_MODEL_DEFAULT }}
          OPENAI_REASONING_EFFORT: high

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GH_EVENT_NAME: ${{ github.event_name }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.num }}
        run: |
          set -e
          echo "Running Solver for ISSUE_NUMBER=${ISSUE_NUMBER}"
          python .github/codex/bot_solver.py

      - name: Upload rejects (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: solver-rejects
          path: |
            **/*.rej
            **/*.orig
            .github/codex/context/**
          if-no-files-found: ignore