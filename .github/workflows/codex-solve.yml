name: Codex – Solver (Bot 2)

on:
  workflow_run:
    workflows: ["Codex – ContextMap (Bot 1)"]
    types: [completed]
  issues:
    types: [labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue:
        description: "Issue-Nummer (optional; überschreibt Kontext)"
        required: false
        default: ""
      force:
        description: "Label-Gate überspringen (true/false)"
        required: false
        default: "false"

permissions:
  contents: write
  pull-requests: write
  actions: write
  issues: write

concurrency:
  group: codex-solve-${{ github.event.issue.number || github.event.workflow_run.id || github.event.comment.id || github.run_id }}
  cancel-in-progress: true

jobs:
  solve:
    # Start-Bedingungen: erfolgreicher Bot 1 ODER Label gesetzt ODER manueller Start ODER Kommentar mit /solve
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'contextmap-ready') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'issue_comment' && github.event.action == 'created' &&
        (contains(github.event.comment.body, '/codex solve') ||
         contains(github.event.comment.body, '/codex-solve') ||
         contains(github.event.comment.body, '/solve')))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full; LFS + submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      # Ermittele die passende run-id von Bot 1 (je nach Trigger)
      - name: Resolve Bot 1 run-id
        id: resolve_run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          WF_NAME: Codex – ContextMap (Bot 1)
          EV_NAME: ${{ github.event_name }}
          RUN_ID_FROM_WR: ${{ github.event.workflow_run.id }}
        run: |
          python - << 'PY'
import os, json, urllib.request, sys
def api(url):
    req = urllib.request.Request(url, headers={
        "Authorization": f"Bearer {os.environ['GH_TOKEN']}",
        "Accept": "application/vnd.github+json"
    })
    with urllib.request.urlopen(req, timeout=60) as r:
        return json.loads(r.read().decode("utf-8"))
repo = os.environ["REPO"]
ev   = os.environ["EV_NAME"]
# 1) workflow_run: run-id direkt
if ev == "workflow_run":
    rid = os.environ.get("RUN_ID_FROM_WR") or ""
    if not rid:
        print("::error::No run id in workflow_run event"); sys.exit(1)
    print(f"run_id={rid}")
    print(f"run_id={rid}", file=open(os.environ["GITHUB_OUTPUT"], "a")); sys.exit(0)
# 2) issues/issue_comment/workflow_dispatch: suche neuesten erfolgreichen Bot-1-Run
wfs = api(f"https://api.github.com/repos/{repo}/actions/workflows")
wf_id = None
for wf in wfs.get("workflows", []):
    if (wf.get("name") or "") == os.environ["WF_NAME"]:
        wf_id = wf.get("id"); break
if not wf_id:
    print(f"::error::Workflow '{os.environ['WF_NAME']}' not found"); sys.exit(1)
runs = api(f"https://api.github.com/repos/{repo}/actions/workflows/{wf_id}/runs?status=success&per_page=1")
rid = ""
arr = runs.get("workflow_runs") or []
if arr:
    rid = str(arr[0].get("id") or "")
if not rid:
    print("::error::No successful Bot 1 run found"); sys.exit(1)
print(f"run_id={rid}")
print(f"run_id={rid}", file=open(os.environ["GITHUB_OUTPUT"], "a"))
PY

      - name: Download context artifact from Bot 1
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.resolve_run.outputs.run_id }}
          path: codex-context

      - name: Prepare context into expected location
        run: |
          mkdir -p .github/codex/context
          # zentrale Dateien kopieren (flexibel bzgl. Artefaktnamen)
          find codex-context -type f -name "solver_input.json" -exec cp -f {} .github/codex/context/solver_input.json \;
          find codex-context -type f -name "solver_input.json.gz" -exec cp -f {} .github/codex/context/solver_input.json.gz \; || true
          find codex-context -type f -name "summary.txt" -exec cp -f {} .github/codex/context/summary.txt \; || true
          # attachments (falls vorhanden)
          if ls codex-context/**/attachments/* 1> /dev/null 2>&1; then
            mkdir -p .github/codex/context/attachments
            cp -rf codex-context/**/attachments/* .github/codex/context/attachments/ 2>/dev/null || true
          fi
          echo "Prepared context files:"
          ls -R .github/codex/context || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install solver deps
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/codex/requirements-solver.txt

      - name: Determine ISSUE_NUMBER
        id: issue
        env:
          EV_NAME: ${{ github.event_name }}
          EV_ISSUE: ${{ github.event.issue.number }}
          DISPATCH_ISSUE: ${{ inputs.issue }}
        run: |
          python - << 'PY'
import os, json, pathlib
p = pathlib.Path(".github/codex/context/solver_input.json")
issue = None
if p.exists():
    try:
        data = json.loads(p.read_text(encoding="utf-8"))
        issue = (data.get("issue_context") or {}).get("number")
    except Exception:
        issue = None
if not issue:
    # fallback: issue from event or manual input
    issue = os.environ.get("EV_ISSUE") or os.environ.get("DISPATCH_ISSUE") or ""
if not str(issue).strip():
    print("::error::Could not determine issue number (not in context and not provided)")
else:
    print(f"ISSUE_NUMBER={issue}")
    with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
        fh.write(f"ISSUE_NUMBER={issue}\n")
    with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as fh:
        fh.write(f"ISSUE_NUMBER={issue}\n")
PY

      - name: Check for contextmap-ready label (gate, unless forced)
        id: gate
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ steps.issue.outputs.ISSUE_NUMBER }}
          EV_NAME: ${{ github.event_name }}
          FORCE: ${{ inputs.force }}
        run: |
          python - << 'PY'
import os, json, urllib.request
# Force can bypass the gate (workflow_dispatch only)
if (os.environ.get("EV_NAME") == "workflow_dispatch") and (os.environ.get("FORCE","").lower() == "true"):
    has = True
else:
    repo = os.environ["REPO"]; issue = os.environ.get("ISSUE") or ""
    if not issue:
        print("::error::No issue number to check label"); has = False
    else:
        req = urllib.request.Request(
            f"https://api.github.com/repos/{repo}/issues/{issue}",
            headers={
                "Authorization": f"Bearer {os.environ['GH_TOKEN']}",
                "Accept": "application/vnd.github+json"
            }
        )
        with urllib.request.urlopen(req, timeout=60) as r:
            data = json.loads(r.read().decode("utf-8"))
        labels = { (l.get("name") or "") for l in data.get("labels", []) }
        has = ("contextmap-ready" in labels)
with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
    fh.write(f"has_label={'true' if has else 'false'}\n")
PY

      - name: Comment waiting notice (if missing label)
        if: steps.gate.outputs.has_label != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ steps.issue.outputs.ISSUE_NUMBER }}
        run: |
          BODY='⏸️ Solver startet erst, wenn **contextmap-ready** gesetzt ist.'
          curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "{\"body\": \"$BODY\"}" \
            "https://api.github.com/repos/$REPO/issues/$ISSUE/comments"

      - name: Run Solver (Bot 2)
        if: steps.gate.outputs.has_label == 'true'
        env:
          # OpenAI (nur für Spec-to-File/AI-Diff benötigt)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL }}
          OPENAI_MODEL_DEFAULT: ${{ vars.OPENAI_MODEL_DEFAULT }}
          OPENAI_REASONING_EFFORT: high
          # GitHub
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.ISSUE_NUMBER }}
        run: |
          python .github/codex/bot_solver.py
