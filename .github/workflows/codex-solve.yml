name: Codex – Solver (Bot 2)

on:
  workflow_run:
    workflows: ["Codex – ContextMap (Bot 1)"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  actions: write
  issues: write

jobs:
  solve:
    # Start nur, wenn Bot 1 erfolgreich war
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full; LFS + submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Download context artifact from Bot 1
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Artefakte aus dem auslösenden workflow_run laden
          run-id: ${{ github.event.workflow_run.id }}
          path: codex-context

      - name: Prepare context into expected location
        run: |
          mkdir -p .github/codex/context
          # zentrale Dateien kopieren (flexibel bzgl. Artefaktnamen)
          find codex-context -type f -name "solver_input.json" -exec cp -f {} .github/codex/context/solver_input.json \;
          find codex-context -type f -name "solver_input.json.gz" -exec cp -f {} .github/codex/context/solver_input.json.gz \; || true
          find codex-context -type f -name "summary.txt" -exec cp -f {} .github/codex/context/summary.txt \; || true
          # attachments (falls vorhanden)
          if ls codex-context/**/attachments/* 1> /dev/null 2>&1; then
            mkdir -p .github/codex/context/attachments
            cp -rf codex-context/**/attachments/* .github/codex/context/attachments/ 2>/dev/null || true
          fi
          echo "Prepared context files:"
          ls -R .github/codex/context || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install solver deps
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/codex/requirements-solver.txt

      - name: Extract ISSUE_NUMBER from solver_input.json
        id: extract_issue
        run: |
          python - << 'PY'
import json, sys, pathlib, os
p = pathlib.Path(".github/codex/context/solver_input.json")
if not p.exists():
    print("::error::solver_input.json not found"); sys.exit(1)
data = json.loads(p.read_text(encoding="utf-8"))
n = (data.get("issue_context") or {}).get("number")
if n is None:
    print("::error::No issue number in solver_input.json"); sys.exit(1)
print(f"ISSUE_NUMBER={n}")
with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
    fh.write(f"ISSUE_NUMBER={n}\n")
with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as fh:
    fh.write(f"ISSUE_NUMBER={n}\n")
PY

      - name: Check for contextmap-ready label (gate)
        id: gate_check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ steps.extract_issue.outputs.ISSUE_NUMBER }}
        run: |
          python - << 'PY'
import os, json, urllib.request
repo = os.environ["REPO"]
issue = os.environ["ISSUE"]
req = urllib.request.Request(
    f"https://api.github.com/repos/{repo}/issues/{issue}",
    headers={
        "Authorization": f"Bearer {os.environ['GH_TOKEN']}",
        "Accept": "application/vnd.github+json"
    }
)
with urllib.request.urlopen(req, timeout=60) as r:
    data = json.loads(r.read().decode("utf-8"))
labels = { (l.get("name") or "") for l in data.get("labels", []) }
has_label = "contextmap-ready" in labels
with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
    fh.write(f"has_label={'true' if has_label else 'false'}\n")
PY

      - name: Comment waiting notice (if missing label)
        if: steps.gate_check.outputs.has_label != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ISSUE: ${{ steps.extract_issue.outputs.ISSUE_NUMBER }}
        run: |
          BODY='⏸️ Solver startet erst, wenn **contextmap-ready** gesetzt ist.'
          curl -s -X POST             -H "Authorization: Bearer $GH_TOKEN"             -H "Accept: application/vnd.github+json"             https://api.github.com/repos/$REPO/issues/$ISSUE/comments             -d "{"body": "$BODY"}" > /dev/null

      - name: Run Solver (Bot 2)
        if: steps.gate_check.outputs.has_label == 'true'
        env:
          # OpenAI (nur für Spec-to-File/AI-Diff benötigt)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL }}
          OPENAI_MODEL_DEFAULT: ${{ vars.OPENAI_MODEL_DEFAULT }}
          OPENAI_REASONING_EFFORT: high
          # GitHub
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          ISSUE_NUMBER: ${{ steps.extract_issue.outputs.ISSUE_NUMBER }}
        run: |
          python .github/codex/bot_solver.py
