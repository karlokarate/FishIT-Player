name: Android – Quick Debug (fast/no-sign)

on:
  workflow_dispatch:
    inputs:
      toolchain_bundle:
        description: "Kompatibler Toolchain-Satz"
        type: choice
        default: "stable"
        options: [stable, lts, project]
      abis:
        description: "ABIs (Splits/Universal)"
        type: choice
        required: true
        default: "arm64+v7a"
        options: [arm64+v7a, arm64, v7a, universal]
      debug_tmate:
        description: "tmate-Debug"
        type: choice
        default: "false"
        options: ["false", "true"]
      pr_annotations:
        description: "Reviewdog PR-Checks (detekt/ktlint/lint, falls Reports vorhanden)"
        type: choice
        default: "false"
        options: ["false", "true"]
      config_json:
        description: "JSON-Overrides (sdk_api, build_tools, jdk, gradle_version, agp_override, kotlin_override, pr_comment, issue_number)"
        required: false
        default: "{}"

permissions:
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: android-fast-${{ github.ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  assemble-debug:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Optional – Python requirements
        run: |
          if [[ -f .github/requirements.txt ]]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install -r .github/requirements.txt
          fi

      - name: Toolchain-Bundle auflösen + JSON-Overrides mergen
        id: cfg
        run: |
          python3 - <<'PY'
          import json, os, sys
          bundle = os.environ.get("BUNDLE","stable").strip()

          bundles = {
            "stable": {
              "sdk_api": "36",
              "build_tools": "35.0.0",
              "jdk": "21",
              "gradle_version": "8.13",
              "agp_override": "8.12.0",
              "kotlin_override": "",
              "pr_comment": "false",
              "issue_number": ""
            },
            "lts": {
              "sdk_api": "34",
              "build_tools": "34.0.0",
              "jdk": "17",
              "gradle_version": "8.7",
              "agp_override": "8.5.2",
              "kotlin_override": "",
              "pr_comment": "false",
              "issue_number": ""
            },
            "project": {
              "sdk_api": "36",
              "build_tools": "35.0.0",
              "jdk": "21",
              "gradle_version": "",
              "agp_override": "",
              "kotlin_override": "",
              "pr_comment": "false",
              "issue_number": ""
            }
          }

          raw = os.environ.get("RAW_CONFIG","").strip()
          user = {}
          if raw:
            try:
              user = json.loads(raw)
            except json.JSONDecodeError as exc:
              print(f"::error::config_json ist kein gültiges JSON ({exc})")
              sys.exit(1)

          # Backcompat: use_gradle_9x → gradle_version
          if user.get("use_gradle_9x","false") in (True, "true"):
            user["gradle_version"] = str(user.get("gradle_9x_version","9.1.0"))

          base = bundles.get(bundle, bundles["stable"]).copy()
          base.update({k: str(v) for k, v in user.items()})

          with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as envf, open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as outf:
            for k, v in base.items():
              envf.write(f"{k}={v}\n")
              outf.write(f"{k}={v}\n")
          PY
        env:
          BUNDLE: ${{ github.event.inputs.toolchain_bundle }}
          RAW_CONFIG: ${{ github.event.inputs.config_json }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.cfg.outputs.jdk }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          packages: |
            platform-tools
            platforms;android-${{ steps.cfg.outputs.sdk_api }}
            build-tools;${{ steps.cfg.outputs.build_tools }}

      - name: Setup Gradle (cache + wrapper validation)
        uses: gradle/actions/setup-gradle@v4.4.3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Optional – Gradle Override aus Bundle/JSON
        if: ${{ steps.cfg.outputs.gradle_version != '' }}
        run: |
          set -euo pipefail
          V="${{ steps.cfg.outputs.gradle_version }}"
          test -f gradle/wrapper/gradle-wrapper.properties || { echo "::error::gradle-wrapper.properties fehlt"; exit 1; }
          sed -i -E "s#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-${V}-bin.zip#g" gradle/wrapper/gradle-wrapper.properties
          echo "Gradle Wrapper → ${V}"

      - name: Optional – AGP/Kotlin Override (nur für diesen Run)
        if: ${{ steps.cfg.outputs.agp_override != '' || steps.cfg.outputs.kotlin_override != '' }}
        run: |
          python3 - <<'PY'
          import re, pathlib, os
          agp = os.environ.get("AGP_NEW","").strip()
          kt  = os.environ.get("KOTLIN_NEW","").strip()
          files=[p for p in pathlib.Path(".").rglob("*")
                 if p.is_file() and p.suffix in (".gradle",".kts",".toml")
                 and "build" not in p.parts]
          for p in files:
            s=p.read_text(encoding="utf-8",errors="ignore"); o=s
            if agp:
              s=re.sub(r"(com\.android\.tools\.build:gradle:)\d+\.\d+(?:\.\d+)?", rf"\\g<1>{agp}", s)
              s=re.sub(r'(id\(["\']com\.android\.(?:application|library|test|dynamic-feature)["\']\)\s+version\s+")[^"]+(")', rf"\\g<1>{agp}\\g<2>", s)
              s=re.sub(r'(?m)^(agp\s*=\s*")\d+\.\d+(?:\.\d+)?(")', rf"\\g<1>{agp}\\g<2>", s)
            if kt:
              s=re.sub(r'(org\.jetbrains\.kotlin:(?:kotlin-gradle-plugin|kotlin-stdlib)[^:]*:)\d+\.\d+(?:\.\d+)?', rf"\\g<1>{kt}", s)
              s=re.sub(r'(id\(["\']org\.jetbrains\.kotlin\.(?:android|jvm|multiplatform)["\']\)\s+version\s+")[^"]+(")', rf"\\g<1>{kt}\\g<2>", s)
              s=re.sub(r'(?m)^(kotlin\s*=\s*")\d+\.\d+(?:\.\d+)?(")', rf"\\g<1>{kt}\\g<2>", s)
            if s!=o: p.write_text(s,encoding="utf-8")
          PY
        env:
          AGP_NEW: ${{ steps.cfg.outputs.agp_override }}
          KOTLIN_NEW: ${{ steps.cfg.outputs.kotlin_override }}

      - name: ABI / Splits konfigurieren
        run: |
          case "${{ github.event.inputs.abis }}" in
            arm64+v7a) echo "ORG_GRADLE_PROJECT_abiFilters=arm64-v8a,armeabi-v7a" >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            arm64)     echo "ORG_GRADLE_PROJECT_abiFilters=arm64-v8a"             >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            v7a)       echo "ORG_GRADLE_PROJECT_abiFilters=armeabi-v7a"           >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=true"  >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=false" >> $GITHUB_ENV;;
            universal) echo "ORG_GRADLE_PROJECT_abiFilters="                      >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_useSplits=false" >> $GITHUB_ENV; echo "ORG_GRADLE_PROJECT_universalApk=true"  >> $GITHUB_ENV;;
          esac

      - name: Gradle Problem-Matcher
        continue-on-error: true
        run: |
          [[ -f .github/gradle-problem-matcher.json ]] && echo "::add-matcher::.github/gradle-problem-matcher.json" || true

      - name: Assemble Debug (ohne Tests)
        run: |
          ./gradlew :app:assembleDebug \
            -PabiFilters="${{ env.ORG_GRADLE_PROJECT_abiFilters }}" \
            -PuniversalApk="${{ env.ORG_GRADLE_PROJECT_universalApk }}" \
            -PuseSplits="${{ env.ORG_GRADLE_PROJECT_useSplits }}" \
            --configuration-cache --build-cache --parallel \
            --stacktrace --warning-mode all -x test

      - name: Artefakt: APKs
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ github.event.inputs.abis }}
          path: app/build/outputs/apk/**/**/*.apk
          if-no-files-found: error
          retention-days: 7

      - name: Reviewdog Setup (optional)
        if: ${{ github.event.inputs.pr_annotations == 'true' }}
        uses: reviewdog/action-setup@v1

      - name: Reviewdog – detekt/ktlint/lint aus Reports (optional)
        if: ${{ github.event.inputs.pr_annotations == 'true' }}
        run: |
          set -e
          if ! command -v reviewdog >/dev/null 2>&1; then
            echo "::warning::reviewdog fehlt – Annotationen übersprungen"
            exit 0
          fi
          if ls **/build/reports/detekt/detekt.xml >/dev/null 2>&1; then
            reviewdog -f=checkstyle -name="detekt" -reporter=github-pr-check -filter-mode=nofilter -fail-on-error=false < **/build/reports/detekt/detekt.xml
          fi
          if ls **/build/reports/ktlint/**/ktlint-checkstyle-report.xml >/dev/null 2>&1; then
            for f in **/build/reports/ktlint/**/ktlint-checkstyle-report.xml; do
              reviewdog -f=checkstyle -name="ktlint" -reporter=github-pr-check -filter-mode=nofilter -fail-on-error=false < "$f"
            done
          fi
          if ls **/build/reports/lint-results*.xml >/dev/null 2>&1; then
            for f in **/build/reports/lint-results*.xml; do
              reviewdog -f=checkstyle -name="android-lint" -reporter=github-pr-check -filter-mode=nofilter -fail-on-error=false < "$f"
            done
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        if: always()
        run: |
          {
            echo "## Artefakte – Quick Debug"
            echo ""
            echo "**Run:** https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo ""
            echo "### APKs"
            find app/build/outputs/apk -type f -name "*.apk" -maxdepth 3 | sed 's/^/- /' || echo "- (keine gefunden)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Start tmate (on failure/explicit)
        if: ${{ failure() || github.event.inputs.debug_tmate == 'true' }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true