diff --git a/app/src/main/java/com/chris/m3usuite/core/perf/DeviceTuning.kt b/app/src/main/java/com/chris/m3usuite/core/perf/DeviceTuning.kt
new file mode 100644
index 0000000..db1ded5
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/core/perf/DeviceTuning.kt
@@ -0,0 +1,78 @@
+package com.chris.m3usuite.core.perf
+
+import android.content.Context
+import android.os.Build
+import java.util.concurrent.atomic.AtomicBoolean
+
+/**
+ * Lightweight device/perf helpers for 32-bit Fire TV (v7a) tuning.
+ *
+ * - Detects v7a ABI and Fire TV (Amazon AFT*)
+ * - Provides a tiny persisted playback gate to pause background work while streaming
+ */
+object DeviceTuning {
+    private const val PREFS = "perf_config"
+    private const val KEY_PLAYBACK_ACTIVE = "playback_active"
+    private val memPlayback = AtomicBoolean(false)
+
+    fun isV7aAbi(): Boolean {
+        return try {
+            // If there are no 64-bit ABIs, treat as 32-bit
+            Build.SUPPORTED_64_BIT_ABIS.isEmpty()
+        } catch (_: Throwable) {
+            // Fallback: common 32-bit ABI markers
+            val abi = Build.CPU_ABI?.lowercase().orEmpty()
+            abi.contains("armeabi") && !abi.contains("arm64")
+        }
+    }
+
+    fun isFireTv(): Boolean {
+        val brand = (Build.BRAND ?: Build.MANUFACTURER ?: "").lowercase()
+        val product = (Build.PRODUCT ?: "").uppercase()
+        return brand.contains("amazon") || product.startsWith("AFT")
+    }
+
+    fun isFireTv32Bit(): Boolean = isV7aAbi() && isFireTv()
+
+    fun setPlaybackActive(context: Context, active: Boolean) {
+        memPlayback.set(active)
+        runCatching {
+            val prefs = context.getSharedPreferences(PREFS, Context.MODE_PRIVATE)
+            prefs.edit().putBoolean(KEY_PLAYBACK_ACTIVE, active).apply()
+        }
+    }
+
+    fun isPlaybackActive(context: Context): Boolean {
+        if (memPlayback.get()) return true
+        return runCatching {
+            context.getSharedPreferences(PREFS, Context.MODE_PRIVATE)
+                .getBoolean(KEY_PLAYBACK_ACTIVE, false)
+        }.getOrDefault(false)
+    }
+}
