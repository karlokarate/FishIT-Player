diff --git a/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducer.kt b/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducer.kt
new file mode 100644
index 0000000..0e12a9e
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducer.kt
@@ -0,0 +1,73 @@
+package com.chris.m3usuite.telegram.auth
+
+/**
+ * Pure Kotlin state machine to drive the Telegram login UX in Settings.
+ * External engine (TDLib) calls onCodeSent/on2FARequired/onAuthorized/fail to advance.
+ * UI triggers submitPhone/submitCode/submitPassword/cancel.
+ */
+class TelegramAuthReducer {
+
+    var state: TelegramAuthState = TelegramAuthState.Idle
+        private set
+
+    private var pendingPhone: String? = null
+
+    fun start(): TelegramAuthState {
+        return set(TelegramAuthState.EnterPhone())
+    }
+
+    fun submitPhone(phone: String): TelegramAuthState {
+        pendingPhone = phone
+        return set(TelegramAuthState.Loading)
+    }
+
+    fun onCodeSent(via: TelegramAuthState.CodeVia): TelegramAuthState {
+        val phone = pendingPhone.orEmpty()
+        return set(TelegramAuthState.CodeRequired(phone, via))
+    }
+
+    fun submitCode(code: String): TelegramAuthState {
+        // Actual verification happens externally; we move to loading and await a signal.
+        return set(TelegramAuthState.Loading)
+    }
+
+    fun on2FARequired(hint: String?): TelegramAuthState {
+        return set(TelegramAuthState.PasswordRequired(hint))
+    }
+
+    fun submitPassword(password: String): TelegramAuthState {
+        // Actual verification happens externally; we move to loading and await a signal.
+        return set(TelegramAuthState.Loading)
+    }
+
+    fun onAuthorized(userId: Long, name: String?, avatarSmall: String?): TelegramAuthState {
+        // Reset ephemeral inputs, keep state authorized
+        pendingPhone = null
+        return set(TelegramAuthState.Authorized(userId, name, avatarSmall))
+    }
+
+    fun fail(message: String, canRetry: Boolean = true): TelegramAuthState {
+        return set(TelegramAuthState.Error(message, canRetry))
+    }
+
+    fun cancel(): TelegramAuthState {
+        pendingPhone = null
+        return set(TelegramAuthState.Cancelled)
+    }
+
+    fun reset(): TelegramAuthState {
+        pendingPhone = null
+        return set(TelegramAuthState.Idle)
+    }
+
+    private fun set(s: TelegramAuthState): TelegramAuthState {
+        state = s
+        return s
+    }
+}
