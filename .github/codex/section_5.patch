diff --git a/app/src/main/java/com/chris/m3usuite/ui/actions/MediaAction.kt b/app/src/main/java/com/chris/m3usuite/ui/actions/MediaAction.kt
new file mode 100644
index 0000000..0b8ab83
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/actions/MediaAction.kt
@@ -0,0 +1,196 @@
+package com.chris.m3usuite.ui.actions
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.LazyRow
+import androidx.compose.foundation.lazy.items
+import androidx.compose.material3.Button
+import androidx.compose.material3.ButtonDefaults
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.OutlinedButton
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.platform.testTag
+import androidx.compose.ui.semantics.Role
+import androidx.compose.ui.semantics.role
+import androidx.compose.ui.semantics.semantics
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.graphics.Shape
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+
+/**
+ * Stable action identifiers for MediaActionBar entries.
+ */
+enum class MediaActionId { Play, Resume, Trailer, AddToList, RemoveFromList, OpenEpg, More }
+
+/**
+ * Immutable model for a single action button in the MediaActionBar.
+ */
+data class MediaAction(
+    val id: MediaActionId,
+    val label: String,
+    val enabled: Boolean = true,
+    val primary: Boolean = false,
+    val badge: String? = null,
+    val onClick: () -> Unit,
+)
+
+/**
+ * Defaults and helpers for MediaActionBar.
+ */
+object MediaActionDefaults {
+    val ButtonHeight = 52.dp
+    val ButtonSpacing = 10.dp
+    val ButtonShape: Shape
+        @Composable get() = MaterialTheme.shapes.large
+
+    fun testTagFor(id: MediaActionId) = "Action-${id.name}"
+}
+
+/**
+ * Single action button. TVâ€‘ready focus scale; role=Button; testTag derived from id.
+ */
+@Composable
+fun MediaActionButton(
+    action: MediaAction,
+    modifier: Modifier = Modifier
+) {
+    val tag = remember(action.id) { MediaActionDefaults.testTagFor(action.id) }
+    val shape = MediaActionDefaults.ButtonShape
+    val height = MediaActionDefaults.ButtonHeight
+    val base = modifier
+        .height(height)
+        .focusScaleOnTv()
+        .semantics { role = Role.Button }
+        .testTag(tag)
+
+    if (action.primary) {
+        Button(
+            onClick = action.onClick,
+            enabled = action.enabled,
+            shape = shape,
+            colors = ButtonDefaults.buttonColors(),
+            modifier = base
+        ) {
+            Text(action.label)
+            if (!action.badge.isNullOrBlank()) {
+                Text(
+                    text = " ${action.badge}",
+                    color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.75f),
+                    modifier = Modifier.padding(start = 4.dp)
+                )
+            }
+        }
+    } else {
+        OutlinedButton(
+            onClick = action.onClick,
+            enabled = action.enabled,
+            shape = shape,
+            modifier = base
+        ) {
+            Text(action.label)
+            if (!action.badge.isNullOrBlank()) {
+                Text(
+                    text = " ${action.badge}",
+                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.75f),
+                    modifier = Modifier.padding(start = 4.dp)
+                )
+            }
+        }
+    }
+}
+
+/**
+ * Horizontal action bar. Uses LazyRow when overflowing to keep DPAD traversal predictable.
+ */
+@Composable
+fun MediaActionBar(
+    actions: List<MediaAction>,
+    modifier: Modifier = Modifier,
+    overflowScrollable: Boolean = true,
+    onPrimaryActionInvoked: (() -> Unit)? = null,
+) {
+    if (actions.isEmpty()) return
+    val spacing = MediaActionDefaults.ButtonSpacing
+    val content: @Composable () -> Unit = {
+        Row(
+            horizontalArrangement = Arrangement.spacedBy(spacing),
+            modifier = modifier
+        ) {
+            actions.forEach { a ->
+                MediaActionButton(
+                    action = if (onPrimaryActionInvoked != null && a.primary) {
+                        a.copy(onClick = {
+                            onPrimaryActionInvoked.invoke()
+                            a.onClick()
+                        })
+                    } else a
+                )
+            }
+        }
+    }
+    if (overflowScrollable && actions.size > 5) {
+        LazyRow(
+            horizontalArrangement = Arrangement.spacedBy(spacing),
+            modifier = modifier
+        ) {
+            items(actions, key = { it.id }) { a ->
+                MediaActionButton(
+                    action = if (onPrimaryActionInvoked != null && a.primary) {
+                        a.copy(onClick = {
+                            onPrimaryActionInvoked.invoke()
+                            a.onClick()
+                        })
+                    } else a
+                )
+            }
+        }
+    } else {
+        content()
+    }
+}
