diff --git a/app/src/main/java/com/chris/m3usuite/ui/detail/DetailScaffold.kt b/app/src/main/java/com/chris/m3usuite/ui/detail/DetailScaffold.kt
new file mode 100644
index 0000000..3fac6f8
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/detail/DetailScaffold.kt
@@ -0,0 +1,262 @@
+package com.chris.m3usuite.ui.detail
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.ColumnScope
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.AssistChip
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextOverflow
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.common.AppIcon
+import com.chris.m3usuite.ui.common.AppIconButton
+import com.chris.m3usuite.ui.compat.focusGroup
+import com.chris.m3usuite.ui.skin.isTvDevice
+import com.chris.m3usuite.ui.skin.tvClickable
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+import com.chris.m3usuite.ui.util.AppAsyncImage
+
+@androidx.compose.runtime.Stable
+data class DetailMeta(
+    val year: String? = null,
+    val duration: String? = null,   // "98 min" / "S01E03 â€“ 44 min"
+    val quality: String? = null,    // "HD/4K"
+    val audio: String? = null,      // "DE 5.1"
+    val tags: List<String> = emptyList()
+)
+
+/**
+ * Lightweight media action model for DetailScaffold. Uses AppIcon to integrate with AppIconButton.
+ */
+data class MediaAction(
+    val icon: AppIcon,
+    val contentDescription: String,
+    val onClick: () -> Unit
+)
+
+/**
+ * Shared detail scaffold with hero backdrop, scrim, and a header (poster, title, meta, actions).
+ * Slots:
+ *  - headerExtras: rendered below the header (e.g., chips)
+ *  - content: main body (e.g., seasons/episodes, EPG, similar)
+ */
+@Composable
+fun DetailScaffold(
+    title: String,
+    subtitle: String? = null,
+    heroUrl: String?,
+    posterUrl: String?,
+    actions: List<MediaAction>,
+    meta: DetailMeta? = null,
+    modifier: Modifier = Modifier,
+    onBack: (() -> Unit)? = null,
+    headerExtras: @Composable ColumnScope.() -> Unit = {},
+    content: @Composable ColumnScope.() -> Unit
+) {
+    val shape = RoundedCornerShape(14.dp)
+    Box(modifier = modifier.fillMaxSize()) {
+        // Background hero
+        if (!heroUrl.isNullOrBlank()) {
+            AppAsyncImage(
+                url = heroUrl,
+                contentDescription = null,
+                modifier = Modifier.matchParentSize(),
+                contentScale = ContentScale.Crop
+            )
+        }
+        // Scrim
+        Box(
+            Modifier
+                .matchParentSize()
+                .background(
+                    Brush.verticalGradient(
+                        colorStops = arrayOf(
+                            0f to Color.Black.copy(alpha = 0.55f),
+                            0.6f to Color.Black.copy(alpha = 0.85f),
+                            1f to Color.Black.copy(alpha = 0.92f)
+                        )
+                    )
+                )
+        )
+
+        // Foreground content
+        val isTv = remember(LocalContext.current) { isTvDevice(LocalContext.current) }
+        Column(
+            modifier = Modifier
+                .fillMaxSize()
+                .verticalScroll(rememberScrollState())
+                .padding(horizontal = 16.dp, vertical = 12.dp)
+        ) {
+            DetailHeader(
+                title = title,
+                subtitle = subtitle,
+                posterUrl = posterUrl,
+                actions = actions,
+                meta = meta,
+                onBack = onBack,
+                modifier = if (isTv) Modifier.focusGroup() else Modifier
+            )
+            headerExtras()
+            Spacer(Modifier.height(8.dp))
+            content()
+            Spacer(Modifier.height(48.dp))
+        }
+    }
+}
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun DetailHeader(
+    title: String,
+    subtitle: String?,
+    posterUrl: String?,
+    actions: List<MediaAction>,
+    meta: DetailMeta?,
+    onBack: (() -> Unit)?,
+    modifier: Modifier = Modifier
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth(),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(16.dp)
+    ) {
+        // Poster
+        Box(
+            Modifier
+                .size(width = 160.dp, height = 240.dp)
+                .clip(RoundedCornerShape(14.dp))
+                .then(if (onBack != null) Modifier.tvClickable(onClick = onBack) else Modifier)
+                .focusScaleOnTv()
+        ) {
+            if (!posterUrl.isNullOrBlank()) {
+                AppAsyncImage(
+                    url = posterUrl,
+                    contentDescription = title,
+                    contentScale = ContentScale.Crop,
+                    modifier = Modifier.matchParentSize()
+                )
+            } else {
+                Box(
+                    Modifier
+                        .matchParentSize()
+                        .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.25f))
+                )
+            }
+        }
+        Column(
+            modifier = Modifier.weight(1f),
+            verticalArrangement = Arrangement.spacedBy(8.dp)
+        ) {
+            Text(
+                text = title,
+                style = MaterialTheme.typography.headlineSmall.copy(fontWeight = FontWeight.SemiBold),
+                maxLines = 2,
+                overflow = TextOverflow.Ellipsis,
+                color = Color.White
+            )
+            if (!subtitle.isNullOrBlank()) {
+                Text(
+                    text = subtitle,
+                    style = MaterialTheme.typography.titleMedium,
+                    maxLines = 2,
+                    overflow = TextOverflow.Ellipsis,
+                    color = Color.White.copy(alpha = 0.85f)
+                )
+            }
+            if (meta != null) {
+                DetailMetaRow(meta = meta)
+            }
+            // Actions
+            Row(
+                horizontalArrangement = Arrangement.spacedBy(10.dp),
+                verticalAlignment = Alignment.CenterVertically
+            ) {
+                actions.forEach { a ->
+                    AppIconButton(
+                        icon = a.icon,
+                        contentDescription = a.contentDescription,
+                        onClick = a.onClick,
+                        size = 28.dp
+                    )
+                }
+            }
+        }
+    }
+}
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun DetailMetaRow(meta: DetailMeta, modifier: Modifier = Modifier) {
+    val chips = buildList {
+        meta.year?.let { add(it) }
+        meta.duration?.let { add(it) }
+        meta.quality?.let { add(it) }
+        meta.audio?.let { add(it) }
+        addAll(meta.tags)
+    }
+    if (chips.isEmpty()) return
+    Row(
+        modifier = modifier,
+        horizontalArrangement = Arrangement.spacedBy(8.dp),
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        chips.take(6).forEach { t ->
+            AssistChip(onClick = {}, enabled = false, label = { Text(t) })
+        }
+    }
+}
