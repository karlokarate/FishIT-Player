diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvSliderRow.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSliderRow.kt
new file mode 100644
index 0000000..942c986
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSliderRow.kt
@@ -0,0 +1,79 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Slider
+import androidx.compose.material3.Text
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Remove
+import androidx.compose.material.icons.filled.Add
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.input.key.Key
+import androidx.compose.ui.input.key.onPreviewKeyEvent
+import androidx.compose.ui.input.key.key
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+import com.chris.m3usuite.ui.skin.tvClickable
+import kotlin.math.roundToInt
+
+@Composable
+fun TvSliderRow(
+    label: String,
+    value: Int,
+    range: IntRange,
+    step: Int = 1,
+    onValueChange: (Int) -> Unit,
+    helperText: String? = null,
+    errorText: String? = null
+) {
+    fun bump(delta: Int) {
+        val v = (value + delta).coerceIn(range.first, range.last)
+        onValueChange(v)
+    }
+    Row(
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(horizontal = 8.dp)
+            .tvClickable(onClick = { /* no-op */ })
+            .onPreviewKeyEvent { ev ->
+                when (ev.key) {
+                    Key.DirectionLeft -> { bump(-step); true }
+                    Key.DirectionRight -> { bump(step); true }
+                    else -> false
+                }
+            },
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        Text(label, style = MaterialTheme.typography.bodyLarge)
+        Row(
+            horizontalArrangement = Arrangement.spacedBy(4.dp),
+            verticalAlignment = Alignment.CenterVertically
+        ) {
+            IconButton(onClick = { bump(-step) }, modifier = Modifier.focusScaleOnTv()) {
+                Icon(Icons.Filled.Remove, contentDescription = "Weniger")
+            }
+            Slider(
+                value = value.toFloat(),
+                onValueChange = { onValueChange(it.roundToInt().coerceIn(range.first, range.last)) },
+                valueRange = range.first.toFloat()..range.last.toFloat(),
+                steps = ((range.last - range.first) / step).coerceAtLeast(0)
+            )
+            IconButton(onClick = { bump(step) }, modifier = Modifier.focusScaleOnTv()) {
+                Icon(Icons.Filled.Add, contentDescription = "Mehr")
+            }
+        }
+    }
+    ValidationHint(helperText = helperText, errorText = errorText)
+}
