diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 7ad2c45..7bdc4a7 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -67,6 +67,9 @@ android {
         vectorDrawables {
             useSupportLibrary = true
         }
+        // TV Form Kit feature flag (v1). Screen-wise activation; fallback to legacy controls when false.
+        // Toggle via -P or buildTypes if needed.
+        buildConfigField("boolean", "FEATURE_TV_FORMS_V1", "true")
     }
 
     buildTypes {
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvButtonRow.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvButtonRow.kt
new file mode 100644
index 0000000..f0e36fb
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvButtonRow.kt
@@ -0,0 +1,46 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.common.TvButton
+import com.chris.m3usuite.ui.common.TvTextButton
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+
+@Composable
+fun TvButtonRow(
+    primaryText: String,
+    onPrimary: () -> Unit,
+    secondaryText: String? = null,
+    onSecondary: (() -> Unit)? = null,
+    enabled: Boolean = true
+){
+    Row(
+        modifier = Modifier.fillMaxWidth(),
+        horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.End),
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        if (secondaryText != null && onSecondary != null) {
+            TvTextButton(onClick = onSecondary, modifier = Modifier.focusScaleOnTv()) {
+                Text(secondaryText)
+            }
+        }
+        TvButton(onClick = onPrimary, enabled = enabled, modifier = Modifier.focusScaleOnTv()) {
+            Text(primaryText)
+        }
+    }
+}
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvFormSection.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvFormSection.kt
new file mode 100644
index 0000000..e672d4d
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvFormSection.kt
@@ -0,0 +1,56 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.ColumnScope
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.height
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Surface
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.dp
+
+@Composable
+fun TvFormSection(
+    title: String,
+    description: String? = null,
+    modifier: Modifier = Modifier,
+    content: @Composable ColumnScope.() -> Unit
+) {
+    Surface(
+        modifier = modifier,
+        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.6f),
+        tonalElevation = 1.dp
+    ) {
+        Column(
+            verticalArrangement = Arrangement.spacedBy(12.dp),
+            modifier = Modifier
+        ) {
+            Spacer(Modifier.height(12.dp))
+            Text(
+                text = title,
+                style = MaterialTheme.typography.titleMedium,
+                color = MaterialTheme.colorScheme.onSurface
+            )
+            if (!description.isNullOrBlank()) {
+                Text(
+                    text = description,
+                    style = MaterialTheme.typography.bodySmall,
+                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)
+                )
+            }
+            Spacer(Modifier.height(4.dp))
+            Column(
+                verticalArrangement = Arrangement.spacedBy(8.dp),
+                content = content
+            )
+            Spacer(Modifier.height(12.dp))
+        }
+    }
+}
+
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvSelectRow.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSelectRow.kt
new file mode 100644
index 0000000..8a622e6
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSelectRow.kt
@@ -0,0 +1,98 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.ChevronLeft
+import androidx.compose.material.icons.filled.ChevronRight
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.input.key.Key
+import androidx.compose.ui.input.key.onPreviewKeyEvent
+import androidx.compose.ui.input.key.key
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+import com.chris.m3usuite.ui.skin.tvClickable
+
+@Composable
+fun <T> TvSelectRow(
+    label: String,
+    options: List<T>,
+    selected: T?,
+    onSelected: (T) -> Unit,
+    optionLabel: (T) -> String,
+    helperText: String? = null,
+    errorText: String? = null,
+    modifier: Modifier = Modifier
+) {
+    val ctx = LocalContext.current
+    val currentIndex = remember(selected, options) {
+        options.indexOfFirst { it == selected }.coerceAtLeast(0)
+    }
+    fun selectIndex(idx: Int) {
+        if (options.isEmpty()) return
+        val i = idx.coerceIn(0, options.lastIndex)
+        onSelected(options[i])
+    }
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .padding(horizontal = 8.dp)
+            .tvClickable(onClick = { /* noop: DPAD LEFT/RIGHT change options, OK ignored */ })
+            .onPreviewKeyEvent { ev ->
+                when (ev.key) {
+                    Key.DirectionLeft -> { selectIndex(currentIndex - 1); true }
+                    Key.DirectionRight -> { selectIndex(currentIndex + 1); true }
+                    else -> false
+                }
+            },
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        Text(label, style = MaterialTheme.typography.bodyLarge)
+        Row(
+            horizontalArrangement = Arrangement.spacedBy(4.dp),
+            verticalAlignment = Alignment.CenterVertically
+        ) {
+            IconButton(onClick = { selectIndex(currentIndex - 1) }, modifier = Modifier.focusScaleOnTv()) {
+                Icon(Icons.Filled.ChevronLeft, contentDescription = "Zurück")
+            }
+            val sel = selected ?: options.getOrNull(0)
+            Text(
+                sel?.let(optionLabel) ?: "—",
+                style = MaterialTheme.typography.bodyLarge,
+                color = if (errorText != null) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface
+            )
+            IconButton(onClick = { selectIndex(currentIndex + 1) }, modifier = Modifier.focusScaleOnTv()) {
+                Icon(Icons.Filled.ChevronRight, contentDescription = "Weiter")
+            }
+        }
+    }
+    ValidationHint(helperText = helperText, errorText = errorText)
+}
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvSliderRow.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSliderRow.kt
new file mode 100644
index 0000000..942c986
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSliderRow.kt
@@ -0,0 +1,79 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Slider
+import androidx.compose.material3.Text
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Remove
+import androidx.compose.material.icons.filled.Add
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.input.key.Key
+import androidx.compose.ui.input.key.onPreviewKeyEvent
+import androidx.compose.ui.input.key.key
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+import com.chris.m3usuite.ui.skin.tvClickable
+import kotlin.math.roundToInt
+
+@Composable
+fun TvSliderRow(
+    label: String,
+    value: Int,
+    range: IntRange,
+    step: Int = 1,
+    onValueChange: (Int) -> Unit,
+    helperText: String? = null,
+    errorText: String? = null
+) {
+    fun bump(delta: Int) {
+        val v = (value + delta).coerceIn(range.first, range.last)
+        onValueChange(v)
+    }
+    Row(
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(horizontal = 8.dp)
+            .tvClickable(onClick = { /* no-op */ })
+            .onPreviewKeyEvent { ev ->
+                when (ev.key) {
+                    Key.DirectionLeft -> { bump(-step); true }
+                    Key.DirectionRight -> { bump(step); true }
+                    else -> false
+                }
+            },
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        Text(label, style = MaterialTheme.typography.bodyLarge)
+        Row(
+            horizontalArrangement = Arrangement.spacedBy(4.dp),
+            verticalAlignment = Alignment.CenterVertically
+        ) {
+            IconButton(onClick = { bump(-step) }, modifier = Modifier.focusScaleOnTv()) {
+                Icon(Icons.Filled.Remove, contentDescription = "Weniger")
+            }
+            Slider(
+                value = value.toFloat(),
+                onValueChange = { onValueChange(it.roundToInt().coerceIn(range.first, range.last)) },
+                valueRange = range.first.toFloat()..range.last.toFloat(),
+                steps = ((range.last - range.first) / step).coerceAtLeast(0)
+            )
+            IconButton(onClick = { bump(step) }, modifier = Modifier.focusScaleOnTv()) {
+                Icon(Icons.Filled.Add, contentDescription = "Mehr")
+            }
+        }
+    }
+    ValidationHint(helperText = helperText, errorText = errorText)
+}
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvSwitchRow.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSwitchRow.kt
new file mode 100644
index 0000000..d1b9a6e
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvSwitchRow.kt
@@ -0,0 +1,44 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Switch
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.skin.tvClickable
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+
+@Composable
+fun TvSwitchRow(
+    label: String,
+    checked: Boolean,
+    onCheckedChange: (Boolean) -> Unit,
+    helperText: String? = null,
+    errorText: String? = null,
+    modifier: Modifier = Modifier
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .padding(horizontal = 8.dp)
+            .tvClickable(onClick = { onCheckedChange(!checked) }),
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        Text(label, style = MaterialTheme.typography.bodyLarge)
+        Switch(
+            checked = checked,
+            onCheckedChange = onCheckedChange,
+            modifier = Modifier.focusScaleOnTv()
+        )
+    }
+    ValidationHint(helperText = helperText, errorText = errorText)
+}
+
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/TvTextFieldRow.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/TvTextFieldRow.kt
new file mode 100644
index 0000000..88102b6
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/TvTextFieldRow.kt
@@ -0,0 +1,80 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.input.PasswordVisualTransformation
+import androidx.compose.ui.unit.dp
+import com.chris.m3usuite.ui.skin.tvClickable
+import com.chris.m3usuite.ui.skin.focusScaleOnTv
+
+enum class TvKeyboard { Default, Number, Password, Uri }
+
+@Composable
+fun TvTextFieldRow(
+    label: String,
+    value: String,
+    onValueChange: (String) -> Unit,
+    placeholder: String? = null,
+    helperText: String? = null,
+    errorText: String? = null,
+    keyboard: TvKeyboard = TvKeyboard.Default,
+    modifier: Modifier = Modifier
+) {
+    val isPassword = remember(keyboard) { keyboard == TvKeyboard.Password }
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .padding(horizontal = 8.dp)
+            .tvClickable(onClick = { /* focus handled by OutlinedTextField */ }),
+        horizontalArrangement = Arrangement.spacedBy(12.dp, Alignment.Start),
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+        Text(
+            label,
+            style = MaterialTheme.typography.bodyLarge,
+            modifier = Modifier.weight(1f)
+        )
+        OutlinedTextField(
+            value = value,
+            onValueChange = onValueChange,
+            placeholder = { if (!placeholder.isNullOrBlank()) Text(placeholder) },
+            visualTransformation = if (isPassword) PasswordVisualTransformation() else androidx.compose.ui.text.input.VisualTransformation.None,
+            modifier = Modifier
+                .weight(2f)
+                .focusScaleOnTv()
+        )
+    }
+    ValidationHint(helperText = helperText, errorText = errorText)
+}
diff --git a/app/src/main/java/com/chris/m3usuite/ui/forms/Validation.kt b/app/src/main/java/com/chris/m3usuite/ui/forms/Validation.kt
new file mode 100644
index 0000000..5b0212b
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/ui/forms/Validation.kt
@@ -0,0 +1,37 @@
+package com.chris.m3usuite.ui.forms
+
+import androidx.compose.foundation.layout.PaddingValues
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+
+sealed interface ValidationState {
+    data object Ok : ValidationState
+    data class Error(val message: String) : ValidationState
+}
+
+typealias Validator<T> = (T) -> ValidationState
+
+@Composable
+fun ValidationHint(
+    helperText: String? = null,
+    errorText: String? = null,
+    padding: PaddingValues = PaddingValues(horizontal = 8.dp)
+) {
+    val err = errorText
+    if (!err.isNullOrBlank()) {
+        Text(
+            err,
+            style = MaterialTheme.typography.bodySmall,
+            color = MaterialTheme.colorScheme.error,
+            modifier = Modifier.padding(padding)
+        )
+    } else if (!helperText.isNullOrBlank()) {
+        Text(helperText, style = MaterialTheme.typography.bodySmall, modifier = Modifier.padding(padding))
+    }
+}
+
diff --git a/app/src/main/java/com/chris/m3usuite/ui/screens/PlaylistSetupScreen.kt b/app/src/main/java/com/chris/m3usuite/ui/screens/PlaylistSetupScreen.kt
index 45c4c22..bdabf36 100644
--- a/app/src/main/java/com/chris/m3usuite/ui/screens/PlaylistSetupScreen.kt
+++ b/app/src/main/java/com/chris/m3usuite/ui/screens/PlaylistSetupScreen.kt
@@ -28,6 +28,7 @@ import androidx.compose.runtime.*
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.alpha
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.platform.LocalContext
@@ -52,6 +53,9 @@ import okhttp3.HttpUrl.Companion.toHttpUrlOrNull
 
 import com.chris.m3usuite.BuildConfig
 import com.chris.m3usuite.prefs.SettingsStore
+import com.chris.m3usuite.ui.forms.TvButtonRow
+import com.chris.m3usuite.ui.forms.TvFormSection
+import com.chris.m3usuite.ui.forms.TvTextFieldRow
 import com.chris.m3usuite.work.SchedulingGateway
 import com.chris.m3usuite.backup.QuickImportRow
 import com.chris.m3usuite.ui.common.AccentCard
@@ -63,6 +67,7 @@ import com.chris.m3usuite.core.xtream.XtreamDetect
 import com.chris.m3usuite.core.xtream.XtreamSeeder
 
 // Setup mode for first-run screen (top-level enum; local enums are not allowed)
 enum class SetupMode { M3U, XTREAM }
@@ -81,6 +86,7 @@ fun PlaylistSetupScreen(onDone: () -> Unit) {
         com.chris.m3usuite.core.debug.GlobalDebug.logTree("setup:root")
     }
     val focusManager = LocalFocusManager.current
+    val isTv = com.chris.m3usuite.ui.skin.isTvDevice(ctx)
 
     // Deep-Link (VIEW-Intent) als Initialwert
     val initialLink by remember {
@@ -141,6 +147,10 @@ fun PlaylistSetupScreen(onDone: () -> Unit) {
         }
     }
 
+    // Feature-flagged TV Forms (v1) – early return path
+    val useTvForms = remember { BuildConfig.FEATURE_TV_FORMS_V1 && isTv }
+    if (useTvForms) { TvSetupFormContent(onDone = onDone, store = store, snackbar = snackbar) ; return }
+
     // -------- Validation / Normalization --------
     val isM3uOk by remember(m3u) {
         derivedStateOf {
@@ -191,6 +201,146 @@ fun PlaylistSetupScreen(onDone: () -> Unit) {
     val bgV = remember(cs) {
         Brush.verticalGradient(
 
+// TV Forms v1: Minimal, DPAD-friendly setup section used when FEATURE_TV_FORMS_V1 && TV
+@Composable
+private fun TvSetupFormContent(
+    onDone: () -> Unit,
+    store: SettingsStore,
+    snackbar: SnackbarHostState
+) {
+    val ctx = LocalContext.current
+    val scope = rememberCoroutineScope()
+    var mode by rememberSaveable { mutableStateOf(SetupMode.M3U) }
+    var busy by rememberSaveable { mutableStateOf(false) }
+    var inlineMsg by rememberSaveable { mutableStateOf<String?>(null) }
+
+    // Fields (simple strings for TV form)
+    var m3u by rememberSaveable { mutableStateOf("") }
+    var epg by rememberSaveable { mutableStateOf("") }
+    var ua by rememberSaveable { mutableStateOf("IBOPlayer/1.4 (Android)") }
+    var ref by rememberSaveable { mutableStateOf("") }
+
+    var xtHost by rememberSaveable { mutableStateOf("") }
+    var xtHttps by rememberSaveable { mutableStateOf(false) }
+    var xtPort by rememberSaveable { mutableStateOf("80") }
+    var xtUser by rememberSaveable { mutableStateOf("") }
+    var xtPass by rememberSaveable { mutableStateOf("") }
+    var xtOut by rememberSaveable { mutableStateOf("m3u8") }
+
+    // Prefill from Settings
+    LaunchedEffect(Unit) {
+        runCatching {
+            val snap = store.snapshot()
+            m3u = snap.m3uUrl
+            epg = snap.epgUrl
+            ua = snap.userAgent.ifBlank { ua }
+            ref = snap.referer
+            xtHost = snap.xtHost
+            xtHttps = snap.xtPort == 443
+            xtPort = snap.xtPort.toString()
+            xtUser = snap.xtUser
+            xtPass = snap.xtPass
+            xtOut = snap.xtOutput.ifBlank { "m3u8" }
+        }
+    }
+
+    // Validation
+    val isM3uOk by remember(m3u) {
+        derivedStateOf {
+            val u = m3u.trim().toHttpUrlOrNull()
+            u != null && (u.scheme == "http" || u.scheme == "https")
+        }
+    }
+    val isXtHostValid by remember(xtHost) {
+        derivedStateOf { xtHost.trim().isNotBlank() }
+    }
+    val isXtPortValid by remember(xtPort, xtHttps) {
+        derivedStateOf {
+            val p = xtPort.trim().toIntOrNull() ?: return@derivedStateOf false
+            p in 1..65535 && (!(xtHttps) || p != 80)
+        }
+    }
+    val isXtCredsOk by remember(xtUser, xtPass) {
+        derivedStateOf { xtUser.isNotBlank() && xtPass.isNotBlank() }
+    }
+    val isXtOutValid by remember(xtOut) {
+        derivedStateOf { xtOut.trim().isNotBlank() }
+    }
+    val canSubmit by remember(mode, isM3uOk, isXtHostValid, isXtPortValid, isXtCredsOk, isXtOutValid, busy) {
+        derivedStateOf {
+            !busy && when (mode) {
+                SetupMode.M3U -> isM3uOk
+                SetupMode.XTREAM -> isXtHostValid && isXtPortValid && isXtCredsOk && isXtOutValid
+            }
+        }
+    }
+
+    fun m3uErrors(): String? = if (!isM3uOk) "Bitte gültige M3U-URL angeben (http/https)" else null
+    fun xtHostErr(): String? = if (!isXtHostValid) "Host ist erforderlich" else null
+    fun xtPortErr(): String? = if (!isXtPortValid) "Port ungültig" else null
+    fun xtCredErr(): String? = if (!isXtCredsOk) "Benutzername und Passwort erforderlich" else null
+    fun xtOutErr(): String? = if (!isXtOutValid) "Ausgabeformat erforderlich" else null
+
+    suspend fun doSubmit() {
+        busy = true
+        inlineMsg = null
+        try {
+            when (mode) {
+                SetupMode.M3U -> {
+                    val m = m3u.trim()
+                    val e = epg.trim()
+                    val u = ua.trim()
+                    val r = ref.trim()
+                    store.set(com.chris.m3usuite.prefs.Keys.M3U_URL, m)
+                    store.set(com.chris.m3usuite.prefs.Keys.EPG_URL, e)
+                    if (u.isNotBlank()) store.set(com.chris.m3usuite.prefs.Keys.USER_AGENT, u)
+                    if (r.isNotBlank()) store.set(com.chris.m3usuite.prefs.Keys.REFERER, r)
+                }
+                SetupMode.XTREAM -> {
+                    val host = run {
+                        val raw = xtHost.trim()
+                        val ensureScheme = if (raw.contains("://")) raw else "http://$raw"
+                        val u = ensureScheme.toHttpUrlOrNull()
+                        (u?.host ?: raw.substringBefore('/').substringBefore(':')).trim()
+                    }
+                    val port = xtPort.trim().toIntOrNull() ?: if (xtHttps) 443 else 80
+                    store.setXtHost(host)
+                    store.setXtPort(port)
+                    store.setXtUser(xtUser.trim())
+                    store.setXtPass(xtPass.trim())
+                    store.setXtOutput(xtOut.trim())
+                    store.setXtPortVerified(true)
+                }
+            }
+            snackbar.showSnackbar("Einstellungen gespeichert")
+            onDone()
+        } catch (t: Throwable) {
+            inlineMsg = t.message ?: "Fehler beim Speichern"
+        } finally {
+            busy = false
+        }
+    }
+
+    Column(Modifier.fillMaxSize().padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
+        TvFormSection(title = "Setup") {
+            TvSelectRow(
+                label = "Modus",
+                options = listOf(SetupMode.M3U, SetupMode.XTREAM),
+                selected = mode,
+                onSelected = { mode = it },
+                optionLabel = { if (it == SetupMode.M3U) "M3U" else "Xtream" }
+            )
+        }
+        if (mode == SetupMode.M3U) {
+            TvFormSection(title = "M3U", description = "Playlist- und EPG-URL") {
+                TvTextFieldRow("M3U URL", m3u, onValueChange = { m3u = it }, placeholder = "http(s)://…/get.php?…", errorText = m3uErrors())
+                TvTextFieldRow("EPG URL", epg, onValueChange = { epg = it }, placeholder = "http(s)://…/xmltv.php?…")
+                TvTextFieldRow("User-Agent", ua, onValueChange = { ua = it })
+                TvTextFieldRow("Referer", ref, onValueChange = { ref = it })
+            }
+        } else {
+            TvFormSection(title = "Xtream", description = "Portal-Zugangsdaten") {
+                TvTextFieldRow("Host", xtHost, onValueChange = { xtHost = it }, placeholder = "example.com", errorText = xtHostErr())
+                TvTextFieldRow("Port", xtPort, onValueChange = { xtPort = it }, placeholder = if (xtHttps) "443" else "80", errorText = xtPortErr())
+                com.chris.m3usuite.ui.forms.TvSwitchRow(label = "HTTPS", checked = xtHttps, onCheckedChange = { xtHttps = it })
+                TvTextFieldRow("Benutzer", xtUser, onValueChange = { xtUser = it }, errorText = xtCredErr())
+                TvTextFieldRow("Passwort", xtPass, onValueChange = { xtPass = it }, keyboard = com.chris.m3usuite.ui.forms.TvKeyboard.Password, errorText = xtCredErr())
+                TvTextFieldRow("Ausgabe", xtOut, onValueChange = { xtOut = it }, placeholder = "m3u8|ts", errorText = xtOutErr())
+            }
+        }
+        if (!inlineMsg.isNullOrBlank()) {
+            Text(text = inlineMsg!!, color = MaterialTheme.colorScheme.error, modifier = Modifier.alpha(0.9f))
+        }
+        TvButtonRow(
+            primaryText = if (busy) "Bitte warten…" else "Speichern",
+            onPrimary = { if (!busy) scope.launch { doSubmit() } },
+            secondaryText = "Abbrechen",
+            onSecondary = { if (!busy) onDone() },
+            enabled = canSubmit
+        )
+    }
+}
+
diff --git a/AGENTS.md b/AGENTS.md
index 5b1b617..acb40ad 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -115,6 +115,8 @@ Short bullet summary (current highlights)
 - TV live controls: DPAD Select toggles a bottom‑right quick‑actions popup (PiP, Subtitle/Audio, Format). Popup stays until Select again or Back. When open, DPAD_DOWN focuses the first button; LEFT/RIGHT navigate; Select activates; Back saves CC settings (if open) and closes the popup.
 - Persistent UI state: All major lists/grids use a route‑scoped state saver so screens and rows restore their scroll/focus position when navigating away and back (Start, Library groups/rows, Details, Settings, Live/VOD/Series). Helpers: `rememberRouteListState(key)`, `rememberRouteGridState(key)` in `ui/state/ScrollStateRegistry.kt`.
 - Dev UX: Compose Live Literals are compiled for debug variants (Gradle config). Use Android Studio Live Edit to tweak literals (`dp`/colors/strings) without redeploy.
+- TV Form Kit v1: Reusable DPAD‑friendly form components in `ui/forms` (`TvFormSection`, `TvTextFieldRow`, `TvSwitchRow`, `TvSliderRow`, `TvSelectRow`, `TvButtonRow`, `Validation`). Feature‑flagged via `BuildConfig.FEATURE_TV_FORMS_V1`. Playlist setup uses the kit on TV devices.
+
 - Kid/Guest profiles: per‑profile permissions (Settings/Quellen, External Player, Favorites, Search, Resume, Whitelist).
 - Kid filtering: Effective allow = item allows ∪ category allows − item blocks; category‑level whitelist + per‑item exceptions via admin UI.
 - Favorites: Live favorites are read‑only when the profile lacks edit permission (default Kid/Guest).
diff --git a/ARCHITECTURE_OVERVIEW.md b/ARCHITECTURE_OVERVIEW.md
index 4260d59..a25cefe 100644
--- a/ARCHITECTURE_OVERVIEW.md
+++ b/ARCHITECTURE_OVERVIEW.md
@@ -41,6 +41,10 @@ Telegram Gating
 - Service startet TDLib bei erstem Token/Push lazy (BuildConfig TG‑Keys) und ruft `RegisterDevice`/`ProcessPushNotification` per Reflection.
 - Keine Foreground‑Nutzung für Push, minimaler RAM/CPU‑Footprint; ohne google‑services.json bleibt es no‑op.
 
+TV Form Kit (v1)
+- Paket `ui/forms` stellt DPAD‑optimierte Bausteine bereit (`TvFormSection`, `TvTextFieldRow`, `TvSwitchRow`, `TvSliderRow`, `TvSelectRow`, `TvButtonRow`, `ValidationHint`).
+- Aktivierung via `BuildConfig.FEATURE_TV_FORMS_V1` (screen‑weise). Erstintegration: Playlist‑Setup (TV‑Geräte).
+
 ## Telegram Service Process
 
 - Service (`.telegram.service.TelegramTdlibService`) läuft in separatem Prozess `:tdlib` und hostet genau eine TDLib‑Client‑Instanz.
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2d4af53..ee7b1f7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,10 @@
+2025-09-30
+- feat(ui/forms): introduce TV Form Kit v1 with DPAD‑friendly controls (`ui/forms`: TvFormSection, TvTextFieldRow, TvSwitchRow, TvSliderRow, TvSelectRow, TvButtonRow, Validation). Feature‑flagged via `BuildConfig.FEATURE_TV_FORMS_V1`.
+- feat(setup/tv): migrate PlaylistSetupScreen to use the TV Form Kit on TV devices when the feature flag is enabled. Keeps legacy UI as fallback on phones/tablets or when the flag is off.
+- docs: add short notes on the TV Form Kit to AGENTS.md and ARCHITECTURE_OVERVIEW.md.
+- build: add BuildConfig flag `FEATURE_TV_FORMS_V1` (default true) for screen‑wise activation.
+
 2025-09-27
 - fix(manifest/icon): set application icon to `@mipmap/ic_launcher` and add `android:roundIcon` (`@mipmap/ic_launcher_round`) instead of the missing `@drawable/fisch_bg`. Launcher already uses adaptive mipmaps; this aligns the manifest with actual assets.
 - docs(roadmap): Priorität‑1 Tasks für TV Fokus/DPAD vereinheitlicht: alle horizontalen Container → TvFocusRow (inkl. Chips/Carousels), alle interaktiven Elemente → tvClickable/tvFocusableItem (No‑Op auf Phone), zentrale Scroll+Fokus‑Registry (ScrollStateRegistry), einheitliche Auto‑Collapse/Expand‑Trigger im HomeChromeScaffold, kein onPreviewKeyEvent außer echten Sonderfällen, Audit‑Skript erzwingt Regeln.
diff --git a/ROADMAP.md b/ROADMAP.md
index 3b2b6bf..6b22117 100644
--- a/ROADMAP.md
+++ b/ROADMAP.md
@@ -1,3 +1,16 @@
 # Roadmap
 
+- Priority‑1 (TV UX)
+  - TV Focus/DPAD (ongoing): migrate horizontal containers to TvFocusRow; ensure tvClickable for interactives; audit in CI.
+  - TV Form Kit (v1) — DONE (initial):
+    - ui/forms: TvFormSection, TvTextFieldRow, TvSwitchRow, TvSliderRow, TvSelectRow, TvButtonRow, ValidationHint.
+    - Feature flag BuildConfig.FEATURE_TV_FORMS_V1 (screen‑wise activation).
+    - First integration: PlaylistSetupScreen on TV devices.
+  - TV Form Kit (v2)
+    - Select dialog (option grid), slider long‑press acceleration, numeric picker overlay.
+    - Migrate core Settings options (player choice, cache sizes).
+    - Apply to XtreamPortalCheck (status/controls).
+
+- Near‑term
+  - Continue migrating Settings sections to the Form Kit; add validators and async checks where useful.
+  - Keep AGENTS/Architecture docs in sync after each migration step.
 
