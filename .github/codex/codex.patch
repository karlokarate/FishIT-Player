diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3e1a914..1c0f6f1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,17 @@
 # Changelog
 
+2025-09-29
+- Build: Introduced ABI product flavors for reliable dual release APKs
+  - Flavor dimension "arch" with flavors:
+    - arm64 (arm64-v8a): ships TDLib via :libtd, TG_TDLIB_ENABLED=true
+    - v7a (armeabi-v7a): no TDLib, Telegram disabled with stubs, TG_TDLIB_ENABLED=false
+  - Per-flavor dependency wiring: arm64Implementation(project(":libtd"))
+  - v7a flavor compiles against TdApi sources but uses stub Client/Log without System.loadLibrary
+  - Disabled ABI splits to avoid conflicts with flavor-based ABI selection
+  - Lint no longer aborts builds; META-INF packaging excludes retained
+  - Proguard: keep org.drinkless.tdlib classes to prevent R8 stripping on arm64
+  - Build commands:
+    - ./gradlew :app:assembleArm64Release → arm64 APK with TDLib
+    - ./gradlew :app:assembleV7aRelease   → v7a APK without TDLib
+
 2025-09-25
 - TV chrome BACK: On TV, ESC/BACK first collapses HomeChrome (from Expanded or Visible) and consumes the event. Prevents closing the player or leaving the screen while chrome is visible.
 - Tile focus logging: Core row engines now emit detailed focus logs on focus, plus a tree hint. Makes it visible in logcat which concrete tile currently has focus across Start/Library/Details rows.
diff --git a/ROADMAP.md b/ROADMAP.md
index 524d0f3..6b490c6 100644
--- a/ROADMAP.md
+++ b/ROADMAP.md
@@ -1,6 +1,10 @@
 # Roadmap
 
 ## Near-term
+- Build packaging
+  - DONE: Dual-APK by ABI flavors (arm64 with TDLib, v7a without TDLib; stubs and keep rules in place)
+  - Verify CI tasks for assembleArm64Release / assembleV7aRelease if needed
+
 - Telegram integration
   - Phase‑2: LTO for TDLib build, event-driven indexing refinements, size trims
   - FCM push routing (finalize), auto start of TDLib service on push
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 7ba8977..b0d8371 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -1,3 +1,4 @@
+@file:Suppress("UnstableApiUsage")
 import java.io.File
 import java.util.Properties
 
@@ -62,6 +63,24 @@ android {
         // Feature switches
         // Toggle visibility of header (User-Agent) editing UI
         val showHeaderUi = (project.findProperty("SHOW_HEADER_UI")?.toString()?.toBooleanStrictOrNull()) ?: false
         buildConfigField("boolean", "SHOW_HEADER_UI", showHeaderUi.toString())
+        // Telegram TDLib enable switch (per-ABI flavor overrides below)
+        buildConfigField("boolean", "TG_TDLIB_ENABLED", "false")
+    }
+
+    // ABI product flavors (reliable per-ABI release APKs)
+    flavorDimensions += "arch"
+    productFlavors {
+        create("arm64") {
+            dimension = "arch"
+            ndk { abiFilters += listOf("arm64-v8a") }
+            buildConfigField("boolean", "TG_TDLIB_ENABLED", "true")
+        }
+        create("v7a") {
+            dimension = "arch"
+            ndk { abiFilters += listOf("armeabi-v7a") }
+            // Ensure Telegram feature is disabled on v7a
+            buildConfigField("boolean", "TG_TDLIB_ENABLED", "false")
+        }
     }
 
     compileOptions {
@@ -91,10 +110,11 @@ android {
     composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }
 
     // Generate split APKs per ABI (32-bit and 64-bit)
     splits {
         abi {
-            isEnable = true
+            // Disabled: flavors control ABI now
+            isEnable = false
             reset()
             include("armeabi-v7a", "arm64-v8a")
             // Only per-ABI APKs (no universal)
             isUniversalApk = false
         }
@@ -128,9 +148,24 @@ android {
     // Keep reference APK dump in repo but exclude it from compilation so it doesn't interfere
     sourceSets {
         getByName("main") {
             java.srcDirs("src/main/java")
         }
+        // v7a flavor compiles against TdApi sources but uses stub Client/Log (no JNI load)
+        getByName("v7a") {
+            java.srcDir("src/v7a/java")
+            java.srcDir("$rootDir/libtd/src/main/java")
+            java.exclude(
+                "org/drinkless/tdlib/Client.java",
+                "org/drinkless/tdlib/Log.java"
+            )
+        }
     }
 
     testOptions {
         unitTests.isIncludeAndroidResources = true
     }
+
+    lint {
+        // Do not abort release builds on lint errors; keep warnings for CI
+        abortOnError = false
+    }
 }
 
 // Exclude reference sources from Kotlin/Java compilation tasks to avoid receiver ambiguities in sourceSets DSL
@@ -153,6 +188,9 @@ tasks.withType<JavaCompile>().configureEach {
 }
 
 dependencies {
+    // TDLib only for arm64 APK; v7a uses stubs and TdApi sources
+    arm64Implementation(project(":libtd"))
+
     val compose = "1.7.6" // aktuellstes Compose (Feb 2025)
 
     // Core + Compose
     implementation("androidx.core:core-ktx:1.15.0")
     implementation("androidx.activity:activity-compose:1.10.0")
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
index 76fbe1b..90bc48f 100644
--- a/app/proguard-rules.pro
+++ b/app/proguard-rules.pro
@@ -46,3 +46,11 @@
 #-keep class com.google.android.exoplayer2.ext.ffmpeg.** { *; }
 #-dontwarn com.google.android.exoplayer2.ext.ffmpeg.**
 
+# TDLib (arm64 flavor): keep Java bindings to prevent stripping when used via JNI/callbacks
+-keep class org.drinkless.tdlib.** { *; }
+-dontwarn org.drinkless.tdlib.**
+
+# Keep generated BuildConfig flags referenced in flavor-dependent code paths
+-keep class com.chris.m3usuite.BuildConfig { *; }
+
diff --git a/app/src/v7a/java/org/drinkless/tdlib/Client.java b/app/src/v7a/java/org/drinkless/tdlib/Client.java
new file mode 100644
index 0000000..c1148e3
--- /dev/null
+++ b/app/src/v7a/java/org/drinkless/tdlib/Client.java
@@ -0,0 +1,79 @@
+package org.drinkless.tdlib;
+
+/**
+ * Stub Client for armeabi-v7a flavor.
+ * No native library loading; all operations are no-op and return TDLib-disabled errors.
+ */
+public final class Client {
+    public interface ResultHandler {
+        void onResult(TdApi.Object object);
+    }
+
+    // Not part of all upstream versions, but present here for compatibility with possible usages.
+    public interface ErrorHandler {
+        void onError(int errorCode, String errorMessage);
+    }
+
+    public interface ExceptionHandler {
+        void onException(Throwable e);
+    }
+
+    private final ResultHandler updateHandler;
+    private final ExceptionHandler exceptionHandler;
+
+    private Client(ResultHandler updateHandler, ExceptionHandler exceptionHandler) {
+        this.updateHandler = updateHandler;
+        this.exceptionHandler = exceptionHandler;
+    }
+
+    public static Client create(ResultHandler updateHandler, ExceptionHandler exceptionHandler) {
+        return new Client(updateHandler, exceptionHandler);
+    }
+
+    // Overload variant used by some integrations
+    public static Client create(ResultHandler updateHandler, ResultHandler defaultHandler, ExceptionHandler exceptionHandler) {
+        return new Client(updateHandler, exceptionHandler);
+    }
+
+    public static TdApi.Object execute(TdApi.Function function) {
+        return new TdApi.Error(501, "TDLib is disabled for armeabi-v7a build", "");
+    }
+
+    public static void setLogVerbosityLevel(int newVerbosityLevel) {
+        // no-op
+    }
+
+    public static void setLogMessageHandler(int maxVerbosityLevel, Log.LogMessageHandler handler) {
+        // no-op
+    }
+
+    public void send(TdApi.Function function, ResultHandler resultHandler) {
+        if (resultHandler != null) {
+            resultHandler.onResult(new TdApi.Error(501, "TDLib is disabled for armeabi-v7a build", ""));
+        }
+    }
+
+    // Overload variant with explicit exception handler
+    public void send(TdApi.Function function, ResultHandler resultHandler, ExceptionHandler exceptionHandler) {
+        send(function, resultHandler);
+    }
+
+    public void destroy() {
+        // no-op
+    }
+
+    public void close() {
+        // no-op
+    }
+}
diff --git a/app/src/v7a/java/org/drinkless/tdlib/Log.java b/app/src/v7a/java/org/drinkless/tdlib/Log.java
new file mode 100644
index 0000000..3f4da8d
--- /dev/null
+++ b/app/src/v7a/java/org/drinkless/tdlib/Log.java
@@ -0,0 +1,22 @@
+package org.drinkless.tdlib;
+
+/**
+ * Stub Log for armeabi-v7a flavor.
+ * Provides the LogMessageHandler interface and no-op setters.
+ */
+public final class Log {
+    private Log() {
+    }
+
+    public interface LogMessageHandler {
+        void onLogMessage(int verbosityLevel, String message);
+    }
+
+    public static void setVerbosityLevel(int newVerbosityLevel) {
+        // no-op
+    }
+
+    public static void setLogMessageHandler(int maxVerbosityLevel, LogMessageHandler handler) {
+        // no-op
+    }
+}
