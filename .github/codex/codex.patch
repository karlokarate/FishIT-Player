diff --git a/AGENTS.md b/AGENTS.md
index 6b4094c..f2d9f0e 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -155,11 +155,16 @@ Short bullet summary (current highlights)
     - Event‑driven indexing (Basis): TDLib‑Service lauscht auf `UpdateNewMessage`/`UpdateMessageContent`/`UpdateFile` und persistiert Minimal‑Metadaten in `telegram_messages` inkl. `localPath`‑Updates per `fileId`. Backfill via `TelegramSyncWorker` bleibt erhalten.
   - Index/Cache: `telegram_messages` wird beim Sync befüllt (fileId/uniqueId, caption, supportsStreaming, date, thumbFileId); `localPath` wird durch DataSources aktualisiert. Minimaler Sync‑Fortschritt in Settings; täglicher Cache‑Trim (GB‑Limit) via `TelegramCacheCleanupWorker`. FCM Push integriert (Token‑Registrierung + `processPushNotification`), Service startet lazy bei Push.
 - TDLib packaging: `:libtd` bundles JNI `libtdjni.so` for `arm64-v8a` (primary). A `armeabi-v7a` slice can be built on demand via the build script. Native JNI is auto‑loaded via a static initializer in `org.drinkless.tdlib.Client`.
+  - App build flavors (arch): We ship two APKs via `arch` product flavors.
+    - arm64 (arm64-v8a): real TDLib included via `:libtd` with JNI; BuildConfig.TG_TDLIB_ENABLED=true.
+    - v7a (armeabi-v7a): TDLib disabled; `:libtd` uses a flavor‑specific Java stub `Client` (no `System.loadLibrary`), no JNI packaged; BuildConfig.TG_TDLIB_ENABLED=false.
+  - Build commands: `./gradlew :app:assembleArm64Release` and `./gradlew :app:assembleV7aRelease`.
+  - ProGuard: keep `org.drinkless.tdlib.**` in app to avoid stripping TDLib classes on arm64.
 - TDLib secrets sourcing: `TG_API_ID`/`TG_API_HASH` are injected at build time without committing secrets.
    - Precedence: ENV vars (`TG_API_ID`, `TG_API_HASH`) → root `/.tg.secrets.properties` (not tracked) → `-P` Gradle props → default 0/empty.
    - To test locally: either set env vars for the Gradle run, or create a root‑level file `.tg.secrets.properties` with `TG_API_ID=...` and `TG_API_HASH=...`.
  - Default UA (secret): HTTP `User-Agent` is injected as `BuildConfig.DEFAULT_UA`.
    - Precedence: ENV var `HEADER` → root `/.ua.secrets.properties` (not tracked) → `-P HEADER` → empty.
    - Neither the repo nor the compiled APK contain the literal UA; app fallbacks read `DEFAULT_UA`.
 - TDLib native packaging: Primary ABI (arm64‑v8a) with static BoringSSL linking for a self‑contained JNI lib; optional `armeabi‑v7a` output for legacy devices.
   - arm64: `scripts/tdlib-build-arm64.sh [--only-arm64|--ref <tag>]` builds `libtdjni.so` for `arm64-v8a` to `libtd/src/main/jniLibs/arm64-v8a/` and syncs Java bindings.
   - v7a (optional): `scripts/tdlib-build-arm64.sh --only-v7a` builds `libtdjni.so` for `armeabi-v7a` to `libtd/src/main/jniLibs/armeabi-v7a/`.
   - One‑shot rebuild helper: `scripts/tdlib-rebuild-latest.sh` cleans old artifacts, sets envs (repo‑local), auto‑detects latest upstream tag (or use `--ref`), builds both ABIs, syncs Java, and verifies the outputs.
   - Size hygiene: Stripping enabled; Phase‑2 adds LTO/GC‑sections/strip‑unneeded to further reduce size.
diff --git a/ARCHITECTURE_OVERVIEW.md b/ARCHITECTURE_OVERVIEW.md
index 6a27f9d..fe73c3e 100644
--- a/ARCHITECTURE_OVERVIEW.md
+++ b/ARCHITECTURE_OVERVIEW.md
@@ -85,6 +85,14 @@ TDLib (JNI + Java bindings) is bundled in `:libtd` and loaded via `org.drinkless
 
 Packaging and ABIs
 - Primary ABI: arm64-v8a. Optional: armeabi-v7a.
+- App flavors (arch):
+  - arm64: ships JNI `libtdjni.so` and the real `Client` from `:libtd`. Telegram enabled (BuildConfig.TG_TDLIB_ENABLED=true).
+  - v7a: ships Java‑only stub `Client` from `:libtd` v7a flavor (no native load), no JNI in APK. Telegram disabled (BuildConfig.TG_TDLIB_ENABLED=false).
+- Build commands:
+  - `./gradlew :app:assembleArm64Release`
+  - `./gradlew :app:assembleV7aRelease`
+- Lint is non-fatal for CI convenience; META‑INF duplicates are excluded globally; ProGuard keeps `org.drinkless.tdlib.**` in release to avoid stripping TDLib on arm64.
+
 
 Secrets
 - Telegram API credentials are injected at build time via ENV / root properties file:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8816d5f..e26f2ef 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,19 @@
 # Changelog
 
+## 2025-09-29
+Build: Dual-APK arch flavors for TDLib
+- Added flavorDimension "arch" with flavors:
+  - arm64 (arm64-v8a): real TDLib from :libtd; BuildConfig.TG_TDLIB_ENABLED=true
+  - v7a (armeabi-v7a): Java-only TDLib stub (no System.loadLibrary, no JNI); BuildConfig.TG_TDLIB_ENABLED=false
+- Disabled ABI splits; rely on flavor-based `ndk.abiFilters`
+- Lint no longer aborts builds
+- ProGuard: keep `org.drinkless.tdlib.**`
+- Library module `:libtd` mirrors `arch` flavors and supplies a v7a-specific `Client` stub to avoid native loading
+- Commands:
+  - `./gradlew :app:assembleArm64Release`
+  - `./gradlew :app:assembleV7aRelease`
+- Fixes potential crashes on v7a due to missing `libtdjni.so` by providing a safe stub
+
 ## 2025-09-18
 TV chrome BACK handling
 - On TV, Back collapses the Home chrome first before navigating away or exiting.
diff --git a/ROADMAP.md b/ROADMAP.md
index 98fe2d1..96571c2 100644
--- a/ROADMAP.md
+++ b/ROADMAP.md
@@ -6,6 +6,13 @@ Conventions
 - Keep near-/mid-term actionable items only; move completed to CHANGELOG.md immediately after patches.
 - Architecture/agents details live in AGENTS.md (single source of truth).
 
+Done (moved to CHANGELOG)
+- Dual APK build for Telegram/TDLib
+  - arch flavors arm64/v7a with proper ndk.abiFilters
+  - v7a ships a Java stub to disable native TDLib and prevent System.loadLibrary
+  - Lint non-fatal; META-INF excludes; ProGuard keep rules
+  - assembleArm64Release / assembleV7aRelease tasks produce release APKs
+
 Near-term
 - TV focus audit: keep `tools/audit_tv_focus.sh` green; fix regressions in TvFocusRow usages and tvClickable semantics
 - ObjectBox key backfill: ensure worker completes on upgrades and after seeding
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 2f7d5a0..8873148 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -8,6 +8,7 @@ plugins {
     id("org.jetbrains.kotlin.plugin.serialization")
     id("org.jetbrains.kotlin.plugin.compose")
     id("io.objectbox") version "3.7.1"
+    // lint configured to be non-fatal below
     // id("com.google.gms.google-services") // enable if google-services.json is configured
 }
 
@@ -59,6 +60,24 @@ android {
         val showHeaderUi = (project.findProperty("SHOW_HEADER_UI")?.toString()?.toBooleanStrictOrNull()) ?: false
         buildConfigField("boolean", "SHOW_HEADER_UI", showHeaderUi.toString())
     }
+
+    // Build flavors for architecture-specific packaging
+    flavorDimensions += "arch"
+    productFlavors {
+        create("arm64") {
+            dimension = "arch"
+            ndk {
+                abiFilters += setOf("arm64-v8a")
+            }
+            buildConfigField("boolean", "TG_TDLIB_ENABLED", "true")
+        }
+        create("v7a") {
+            dimension = "arch"
+            ndk {
+                abiFilters += setOf("armeabi-v7a")
+            }
+            buildConfigField("boolean", "TG_TDLIB_ENABLED", "false")
+        }
+    }
 
     compileOptions {
         sourceCompatibility = JavaVersion.VERSION_17
@@ -84,14 +103,14 @@ android {
     }
     composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }
 
-    // Generate split APKs per ABI (32-bit and 64-bit)
+    // Disable legacy ABI splits; flavors (arch) define ABI-specific outputs
     splits {
         abi {
-            isEnable = true
-            reset()
-            include("armeabi-v7a", "arm64-v8a")
-            // Only per-ABI APKs (no universal)
-            isUniversalApk = false
+            isEnable = false
+            // reset()
+            // include("armeabi-v7a", "arm64-v8a")
+            // Only per-ABI APKs (no universal) — handled by flavors now
+            // isUniversalApk = false
         }
     }
 
@@ -121,6 +140,11 @@ android {
     testOptions {
         unitTests.isIncludeAndroidResources = true
     }
+
+    // Do not fail build on lint (CI/dev convenience; we still run lint reports)
+    lint {
+        abortOnError = false
+    }
 }
 
 // Exclude reference sources from Kotlin/Java compilation tasks to avoid receiver ambiguities in sourceSets DSL
@@ -143,6 +167,10 @@ dependencies {
     val compose = "1.7.6" // aktuellstes Compose (Feb 2025)
 
     // Core + Compose
+    // Note: :libtd is added as a regular dependency (variant-aware). With the arch flavor,
+    // app:arm64 will consume libtd:arm64 (real JNI), app:v7a will consume libtd:v7a (Java stub).
+    // If an unconditional dependency on :libtd already exists, variant matching will route to
+    // the correct flavor; no duplication necessary.
     implementation("androidx.core:core-ktx:1.15.0")
     implementation("androidx.activity:activity-compose:1.10.0")
diff --git a/libtd/build.gradle.kts b/libtd/build.gradle.kts
index 3d7c4f8..f0fe6a5 100644
--- a/libtd/build.gradle.kts
+++ b/libtd/build.gradle.kts
@@ -1,8 +1,35 @@
 plugins {
     id("com.android.library")
     id("org.jetbrains.kotlin.android")
 }
 
 android {
+    namespace = "org.drinkless.tdlib"
+
+    compileSdk = 35
+
+    defaultConfig {
+        minSdk = 21
+        targetSdk = 35
+        consumerProguardFiles("consumer-rules.pro")
+    }
+
+    compileOptions {
+        sourceCompatibility = JavaVersion.VERSION_17
+        targetCompatibility = JavaVersion.VERSION_17
+    }
+    kotlinOptions {
+        jvmTarget = "17"
+    }
+
+    // Align with app: provide matching arch flavors, so variant-aware dependency works.
+    flavorDimensions += "arch"
+    productFlavors {
+        create("arm64") {
+            dimension = "arch"
+        }
+        create("v7a") {
+            dimension = "arch"
+        }
+    }
 }
 
 dependencies {
diff --git a/libtd/src/v7a/java/org/drinkless/tdlib/Client.java b/libtd/src/v7a/java/org/drinkless/tdlib/Client.java
new file mode 100644
index 0000000..f929237
--- /dev/null
+++ b/libtd/src/v7a/java/org/drinkless/tdlib/Client.java
@@ -0,0 +1,84 @@
+package org.drinkless.tdlib;
+
+/**
+ * Lightweight Java stub for armeabi-v7a builds to avoid native loading.
+ * This class mirrors the public surface needed by app code but performs no TDLib operations.
+ *
+ * Note:
+ * - No System.loadLibrary call here.
+ * - Methods are no-ops or return null.
+ * - BuildConfig.TG_TDLIB_ENABLED in the app is set to false for v7a, so app code should gate usage.
+ */
+@SuppressWarnings({"unused"})
+public final class Client {
+
+    public interface ResultHandler {
+        void onResult(TdApi.Object object);
+    }
+
+    public interface ErrorHandler {
+        void onError(int errorCode, String errorMessage);
+    }
+
+    public interface ExceptionHandler {
+        void onException(Throwable e);
+    }
+
+    private final ResultHandler updatesHandler;
+    private final ErrorHandler errorHandler;
+    private final ExceptionHandler exceptionHandler;
+
+    private Client(ResultHandler updatesHandler,
+                   ErrorHandler errorHandler,
+                   ExceptionHandler exceptionHandler) {
+        this.updatesHandler = updatesHandler;
+        this.errorHandler = errorHandler;
+        this.exceptionHandler = exceptionHandler;
+    }
+
+    /**
+     * Creates a stub client that never connects to TDLib.
+     */
+    public static Client create(ResultHandler updatesHandler,
+                                ErrorHandler errorHandler,
+                                ExceptionHandler exceptionHandler) {
+        return new Client(updatesHandler, errorHandler, exceptionHandler);
+    }
+
+    /**
+     * No-op send. Immediately returns without invoking native code.
+     */
+    public void send(TdApi.Function query, ResultHandler resultHandler) {
+        // Best-effort: signal "not supported" via error handler if present.
+        if (errorHandler != null) {
+            errorHandler.onError(-1, "TDLib is disabled for v7a build (stub).");
+        }
+        // Also callback result handler with null to avoid hangs in simple flows.
+        if (resultHandler != null) {
+            resultHandler.onResult(null);
+        }
+    }
+
+    /**
+     * No-op execute. Always returns null.
+     */
+    public static TdApi.Object execute(TdApi.Function query) {
+        return null;
+    }
+
+    /**
+     * No-op update handler setter.
+     */
+    public void setUpdatesHandler(ResultHandler updatesHandler, int delayMs) {
+        // ignore
+    }
+
+    /**
+     * No-op destroy.
+     */
+    public void destroy() {
+        // ignore
+    }
+
+    // No static initializer; critical to avoid System.loadLibrary on v7a
+}
diff --git a/libtd/src/v7a/java/org/drinkless/tdlib/package-info.java b/libtd/src/v7a/java/org/drinkless/tdlib/package-info.java
new file mode 100644
index 0000000..2c78d3c
--- /dev/null
+++ b/libtd/src/v7a/java/org/drinkless/tdlib/package-info.java
@@ -0,0 +1,4 @@
+@javax.annotation.ParametersAreNonnullByDefault
+package org.drinkless.tdlib;
+
+import javax.annotation.ParametersAreNonnullByDefault;
