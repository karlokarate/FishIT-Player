diff --git a/AGENTS.md b/AGENTS.md
index 5c2f5c8..a7f1b9c 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -79,10 +79,11 @@ Short bullet summary (current highlights)
 - TDLib packaging: `:libtd` bundles JNI `libtdjni.so` for `arm64-v8a` (primary). A `armeabi-v7a` slice can be built on demand via the build script. Native JNI is auto‑loaded via a static initializer in `org.drinkless.tdlib.Client`.
 - TDLib secrets sourcing: `TG_API_ID`/`TG_API_HASH` are injected at build time without committing secrets.
-   - Precedence: ENV vars (`TG_API_ID`, `TG_API_HASH`) → root `/.tg.secrets.properties` (not tracked) → `-P` Gradle props → default 0/empty.
-   - To test locally: either set env vars for the Gradle run, or create a root‑level file `.tg.secrets.properties` with `TG_API_ID=...` and `TG_API_HASH=...`.
+   - Precedence: ENV vars (`TG_API_ID`, `TG_API_HASH`) → root `/.tg.secrets.properties` (not tracked) → root `/.env.local` (optional, not tracked) → `-P` Gradle props → default 0/empty.
+   - To test locally: either set env vars for the Gradle run, or create a root‑level file `.tg.secrets.properties` or `.env.local` with `TG_API_ID=...` and `TG_API_HASH=...`.
+   - A boolean `BuildConfig.TG_SECRETS_PRESENT` indicates whether both values were provided (non‑zero/non‑empty).
  - Default UA (secret): HTTP `User-Agent` is injected as `BuildConfig.DEFAULT_UA`.
    - Precedence: ENV var `HEADER` → root `/.ua.secrets.properties` (not tracked) → `-P HEADER` → empty.
    - Neither the repo nor the compiled APK contain the literal UA; app fallbacks read `DEFAULT_UA`.
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9d7d6b1..0c3d1b7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,12 @@
 # Changelog
+
+## 2025-09-29
+- BuildConfig/Secrets
+  - Hardened TDLib secrets sourcing: added optional root-level .env.local fallback.
+  - Exposed BuildConfig.TG_SECRETS_PRESENT for clear Settings validation.
+- Telegram Auth
+  - Introduced pure Kotlin TelegramAuthReducer + TelegramAuthState (state machine) to drive Settings login UX.
+  - Added unit tests for happy-path (with 2FA), error/retry, and cancel/reset flows.
+
 ## [Unreleased]
 - ...
diff --git a/ROADMAP.md b/ROADMAP.md
index 3d0e8a9..92f9f5f 100644
--- a/ROADMAP.md
+++ b/ROADMAP.md
@@ -1,6 +1,16 @@
 # Roadmap
 
+- Near-term (Telegram Auth UX/Infra)
+  - Wire Settings "Telegram verbinden" UI to TelegramAuthReducer state machine (idle/loading/code/2FA/error).
+  - Use BuildConfig.TG_SECRETS_PRESENT to surface clear guidance when secrets are missing.
+  - Persist minimal session/account metadata to ObjectBox atomically after Authorized state.
+  - Ensure OkHttp singleton + Coil3 global ImageLoader are used for avatar/profile picture loading (placeholders, caching).
+
 - Mid-term
   - ...
 
+- Done
+  - TDLib secrets sourcing hardened: added .env.local fallback and BuildConfig flag.
+  - TelegramAuthReducer + unit tests for core transitions.
+
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 9cda3a2..9a2db9a 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -25,17 +25,22 @@ android {
         testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
 
         // Telegram API credentials (secure lookup, non-committed):
-        // Precedence: ENV → .tg.secrets.properties (root, untracked) → project -P props → default
+        // Precedence: ENV → .tg.secrets.properties (root, untracked) → .env.local (root, untracked) → project -P props → default
         val secretsFile = File(rootDir, ".tg.secrets.properties")
-        val secrets = Properties().apply {
-            if (secretsFile.exists()) secretsFile.inputStream().use { load(it) }
-        }
+        val dotenvFile = File(rootDir, ".env.local")
+        val secrets = Properties().apply { if (secretsFile.exists()) secretsFile.inputStream().use { load(it) } }
+        val dotenv = Properties().apply { if (dotenvFile.exists()) dotenvFile.inputStream().use { load(it) } }
         fun prop(name: String): String? =
             System.getenv(name)
-                ?: (secrets.getProperty(name))
+                ?: secrets.getProperty(name)
+                ?: dotenv.getProperty(name)
                 ?: (project.findProperty(name)?.toString())
 
         val tgApiIdValue = prop("TG_API_ID")?.toIntOrNull() ?: 0
         val tgApiHashValue = prop("TG_API_HASH") ?: ""
+        val tgSecretsPresent = tgApiIdValue != 0 && tgApiHashValue.isNotBlank()
 
         buildConfigField("int", "TG_API_ID", tgApiIdValue.toString())
         buildConfigField("String", "TG_API_HASH", "\"${tgApiHashValue}\"")
+        // Helper flag for runtime validation (Settings UX)
+        buildConfigField("boolean", "TG_SECRETS_PRESENT", tgSecretsPresent.toString())
 
         // Default HTTP User-Agent (secret-injected, non-committed):
         // Precedence: ENV HEADER → /.ua.secrets.properties HEADER → -P HEADER → default empty
diff --git a/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducer.kt b/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducer.kt
new file mode 100644
index 0000000..0e12a9e
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducer.kt
@@ -0,0 +1,73 @@
+package com.chris.m3usuite.telegram.auth
+
+/**
+ * Pure Kotlin state machine to drive the Telegram login UX in Settings.
+ * External engine (TDLib) calls onCodeSent/on2FARequired/onAuthorized/fail to advance.
+ * UI triggers submitPhone/submitCode/submitPassword/cancel.
+ */
+class TelegramAuthReducer {
+
+    var state: TelegramAuthState = TelegramAuthState.Idle
+        private set
+
+    private var pendingPhone: String? = null
+
+    fun start(): TelegramAuthState {
+        return set(TelegramAuthState.EnterPhone())
+    }
+
+    fun submitPhone(phone: String): TelegramAuthState {
+        pendingPhone = phone
+        return set(TelegramAuthState.Loading)
+    }
+
+    fun onCodeSent(via: TelegramAuthState.CodeVia): TelegramAuthState {
+        val phone = pendingPhone.orEmpty()
+        return set(TelegramAuthState.CodeRequired(phone, via))
+    }
+
+    fun submitCode(code: String): TelegramAuthState {
+        // Actual verification happens externally; we move to loading and await a signal.
+        return set(TelegramAuthState.Loading)
+    }
+
+    fun on2FARequired(hint: String?): TelegramAuthState {
+        return set(TelegramAuthState.PasswordRequired(hint))
+    }
+
+    fun submitPassword(password: String): TelegramAuthState {
+        // Actual verification happens externally; we move to loading and await a signal.
+        return set(TelegramAuthState.Loading)
+    }
+
+    fun onAuthorized(userId: Long, name: String?, avatarSmall: String?): TelegramAuthState {
+        // Reset ephemeral inputs, keep state authorized
+        pendingPhone = null
+        return set(TelegramAuthState.Authorized(userId, name, avatarSmall))
+    }
+
+    fun fail(message: String, canRetry: Boolean = true): TelegramAuthState {
+        return set(TelegramAuthState.Error(message, canRetry))
+    }
+
+    fun cancel(): TelegramAuthState {
+        pendingPhone = null
+        return set(TelegramAuthState.Cancelled)
+    }
+
+    fun reset(): TelegramAuthState {
+        pendingPhone = null
+        return set(TelegramAuthState.Idle)
+    }
+
+    private fun set(s: TelegramAuthState): TelegramAuthState {
+        state = s
+        return s
+    }
+}
diff --git a/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthState.kt b/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthState.kt
new file mode 100644
index 0000000..b8ea690
--- /dev/null
+++ b/app/src/main/java/com/chris/m3usuite/telegram/auth/TelegramAuthState.kt
@@ -0,0 +1,19 @@
+package com.chris.m3usuite.telegram.auth
+
+sealed interface TelegramAuthState {
+    object Idle : TelegramAuthState
+    data class EnterPhone(val default: String? = null) : TelegramAuthState
+    object Loading : TelegramAuthState
+    data class CodeRequired(val phone: String, val via: CodeVia) : TelegramAuthState
+    data class PasswordRequired(val hint: String?) : TelegramAuthState
+    data class Error(val message: String, val canRetry: Boolean) : TelegramAuthState
+    data class Authorized(val userId: Long, val name: String?, val avatarSmall: String?) : TelegramAuthState
+    object Cancelled : TelegramAuthState
+
+    enum class CodeVia {
+        Sms,
+        App,
+        Call,
+        Other
+    }
+}
diff --git a/app/src/test/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducerTest.kt b/app/src/test/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducerTest.kt
new file mode 100644
index 0000000..417c2a4
--- /dev/null
+++ b/app/src/test/java/com/chris/m3usuite/telegram/auth/TelegramAuthReducerTest.kt
@@ -0,0 +1,46 @@
+package com.chris.m3usuite.telegram.auth
+
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+class TelegramAuthReducerTest {
+
+    @Test
+    fun happyPath_with2FA() {
+        val r = TelegramAuthReducer()
+        assertEquals(TelegramAuthState.EnterPhone(), r.start())
+        assertEquals(TelegramAuthState.Loading, r.submitPhone("+491234567"))
+        assertEquals(
+            TelegramAuthState.CodeRequired("+491234567", TelegramAuthState.CodeVia.Sms),
+            r.onCodeSent(TelegramAuthState.CodeVia.Sms)
+        )
+        assertEquals(TelegramAuthState.Loading, r.submitCode("12345"))
+        assertEquals(TelegramAuthState.PasswordRequired(hint = "Email PW"), r.on2FARequired("Email PW"))
+        assertEquals(TelegramAuthState.Loading, r.submitPassword("secret"))
+        val authorized = r.onAuthorized(42L, "Alice", "file://avatar_small.jpg")
+        assertEquals(TelegramAuthState.Authorized(42L, "Alice", "file://avatar_small.jpg"), authorized)
+    }
+
+    @Test
+    fun error_and_retry() {
+        val r = TelegramAuthReducer()
+        r.start()
+        r.submitPhone("+1")
+        r.onCodeSent(TelegramAuthState.CodeVia.Sms)
+        r.submitCode("00000")
+        assertEquals(
+            TelegramAuthState.Error("Invalid code", true),
+            r.fail("Invalid code", canRetry = true)
+        )
+        // Retry flow
+        assertEquals(TelegramAuthState.EnterPhone(), r.start())
+    }
+
+    @Test
+    fun cancel_flow() {
+        val r = TelegramAuthReducer()
+        r.start()
+        r.submitPhone("+1")
+        assertEquals(TelegramAuthState.Cancelled, r.cancel())
+        assertEquals(TelegramAuthState.Idle, r.reset())
+    }
+}
