diff --git a/AGENTS.md b/AGENTS.md
index a9a37d3..7a91c7d 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -24,7 +24,7 @@ Codex – Operating Rules (override)
 - Full context gathering: For a complete overview, Codex also reads ROADMAP.md, CHANGELOG.md, ARCHITECTURE_OVERVIEW.md, and the latest commits/PRs to understand the current state before making changes.
 - Auto documentation upkeep: Immediately after patches, Codex updates the full documentation set (AGENTS.md, ROADMAP.md, CHANGELOG.md, ARCHITECTURE_OVERVIEW.md) and pushes to `master`. If the environment blocks direct writes or pushes, Codex prepares diffs and requests the smallest possible approval to finalize.
  - Deep dependency awareness: When patching, Codex reads all relevant modules in appropriately sized batches and considers all dependent modules. `ARCHITECTURE_OVERVIEW.md` is maintained as a detailed, human‑friendly derivative; if it disagrees with this file, this file wins.
 - Xtream single source: The folder `app/src/main/java/com/chris/m3usuite/core/xtream` is the canonical source for Xtream handling (detect, config, capabilities, client, models). Other usages must adapt to these APIs.
-- ObjectBox primary store: ObjectBox is the primary local store for content (categories, live, vod, series, episodes, epg_now_next). Telegram metadata is now stored in ObjectBox as well (`ObxTelegramMessage`). Room has been removed from app flows.
+- ObjectBox primary store: ObjectBox is the primary local store for content (categories, live, vod, series, episodes, epg_now_next). Telegram metadata is now stored in ObjectBox as well (`ObxTelegramMessage`). Room has been removed from primary app flows; legacy tables/IDs may still exist for compatibility during the transition.
 - OBX ID bridging: OBX‑backed lists encode stable IDs into `MediaItem.id` for navigation: live=`1e12+streamId`, vod=`2e12+vodId`, series=`3e12+seriesId`. Detail screens resolve these IDs to OBX and build play URLs via `XtreamClient`. Legacy Room IDs remain supported where present (favorites/resume) during the transition.
 - ObjectBox search: Search uses indexed `nameLower` fields and category-name matches with page-aware merging (no full in-memory merges). Avoid Room paging in Library. Prefer OBX queries.
 - EPG fast path: Short EPG is fetched on-demand for visible live items and written to ObjectBox. Screens subscribe to `ObxEpgNowNext` (event-based). Room persistence has been removed.
@@ -59,7 +59,7 @@ Codex – Operating Rules (override)
 - Tooling upgrades: If Codex needs additional tools or configuration to work better, it informs the user and, where possible, sets them up itself; otherwise it provides clear, copy‑pastable step‑by‑step commands for the user to establish the optimal environment.
 - TDLib pinning: TDLib (JNI + Java bindings) is pinned to a specific upstream tag for reproducibility. The build script `scripts/tdlib-build-arm64.sh` checks out the tag and copies `TdApi.java`/`Client.java` from TDLib’s `example/java` into `libtd/src/main/java/org/drinkless/tdlib/`. Default pin: `v1.8.0` (the latest upstream tag as of now; override via env `TD_TAG`/`TD_COMMIT` or CLI `--ref <tag|commit>`). `Log.java` stays local to match JNI signatures.
 
 Sandbox/WSL – Agent Execution Rules (Best Effort)
 - Repo‑local tools only: never use `sudo` or modify system config. Install portable binaries under `.wsl-*` and prefer them in `PATH`.
@@ -147,7 +147,7 @@ Git Push Policy (SSH, codex‑wsl)
 Where to find the full overview
 - The canonical, continuously updated source is `AGENTS.md` (this file).
 - `ARCHITECTURE_OVERVIEW.md` is a detailed, human‑friendly derivative of this file. If discrepancies occur, this file prevails. Keep `ARCHITECTURE_OVERVIEW.md` updated whenever new modules/features are added.
 
 Short bullet summary (current highlights)
-- Single-module app (`app`) with Compose UI, Room DB/DAOs, WorkManager, DataStore, Media3 player, OkHttp/Coil.
+- Single-module app (`app`) with Compose UI, ObjectBox (primary store), WorkManager, DataStore, Media3 player, OkHttp/Coil. Room remains only for legacy/transition paths where present; core flows are OBX-first.
   - Telegram integration (opt‑in, alpha → phase‑2 in progress): Login (Phone→Code→Passwort) mit auto DB‑Key‑Check; Settings‑Block mit Ordner/Chat‑Picker und separaten Quellen für Film/Serien‑Sync; Sync‑Worker mappt Nachrichten auf VOD (`MediaItem.source=TG`) oder Serie (Episode.tg*; SxxExx‑Heuristik). Player streamt `tg://message?...` via Telegram‑DataSource (Seek, progressive Download). Packaging über `:libtd` (arm64). Phase‑2: QR‑Login (done), dedicated TDLib service process (done), foreground switching on downloads/auth (done), lifecycle/network hooks (done), FCM push hooks (prepped), event‑driven indexing (basis done), LTO (next).
     - Event‑driven indexing (Basis): TDLib‑Service lauscht auf `UpdateNewMessage`/`UpdateMessageContent`/`UpdateFile` und persistiert Minimal‑Metadaten in `telegram_messages` inkl. `localPath`‑Updates per `fileId`. Backfill via `TelegramSyncWorker` bleibt erhalten.
   - Index/Cache: `telegram_messages` wird beim Sync befüllt (fileId/uniqueId, caption, supportsStreaming, date, thumbFileId); `localPath` wird durch DataSources aktualisiert. Minimaler Sync‑Fortschritt in Settings; täglicher Cache‑Trim (GB‑Limit) via `TelegramCacheCleanupWorker`. FCM Push integriert (Token‑Registrierung + `processPushNotification`), Service startet lazy bei Push.
@@ -163,7 +163,7 @@ Short bullet summary (current highlights)
 - Diagnostics: Settings zeigt OBX-Zähler (Live/VOD/Series) und eine "Import aktualisieren"-Aktion, die `XtreamSeeder` erneut ausführt (optional mit Discovery-Force) und Detailjobs plant. Eine Strict-M3U-Option existiert nicht mehr; explizite Prune-Läufe sind Separate Wartungsjobs.
   - Globales Debugging (schaltbar): Schalter in „Import & Diagnose“. Wenn aktiviert, protokolliert das Modul Navigationsschritte (NavController Listener), DPAD‑Eingaben (inkl. Player‑Tasten), Tile‑Focus (mit OBX‑Titel in Klammern) und OBX‑Key‑Updates (Backfill der sort/provider/genre/year Keys) nach Logcat unter dem Tag `GlobalDebug`. Default OFF.
 
-- EPG: Now/Next dual-persist (Room + ObjectBox) with XMLTV fallback; no periodic worker. UI reads OBX; on-demand prefetch for visible tiles and favorites at app start; Live tiles show title + progress.
+- EPG: Now/Next persisted in ObjectBox (short EPG) with XMLTV fallback; no periodic worker. UI reads OBX; on-demand prefetch for visible tiles and favorites at app start; Live tiles show title + progress.
 - Unified UI polish: Accent tokens (adult/kid), carded sections (`AccentCard`), gradient + glow background with blurred app icon; kid profiles use a vibrant palette.
 - TV buttons: Use `TvButton`/`TvTextButton`/`TvOutlinedButton`/`TvIconButton` (in `ui/common/TvButtons.kt`) to get focus glow + bounce by default. Avoid raw Material3 buttons in TV paths.
 - TV Lazy migration: Do not use `androidx.tv.foundation.TvLazyRow` (deprecated). Use `LazyRow` from compose.foundation with TV focus APIs: `focusGroup()` on the container and `focusable()` + bring-into-view on item focus. A reusable wrapper `com.chris.m3usuite.ui.tv.TvFocusRow` is available and should be used for horizontal TV rows (chips, carousels, overlays). Remove manual DPAD index arithmetic; prefer `moveFocus(...)` when needed.
@@ -181,7 +181,7 @@ Policies (Do/Don't)
 - Provider normalization: UI-Gruppierungen nutzen `CategoryNormalizer`; Rows gruppieren nach normalisierten Schlüsseln, nicht nach rohen group‑title Strings.
   - Neu: `normalizeBucket(kind, groupTitle, tvgName, url)` begrenzt je Kind (live/vod/series) die Kategorien auf ≤10 stabile Buckets (z. B. live: sports/news/documentary/kids/music/international/entertainment/screensaver/movies; vod: netflix/amazon_prime/disney_plus/apple_tv_plus/sky_warner/anime/new/kids/german/other; series analog). Qualitätstoken (HEVC/FHD/HD/SD/4K) fließen nicht in die Buckets ein.
 - Telegram gating: Keine TDLib‑Nutzung ohne aktives Flag (`tg_enabled=true`) und erfolgreichen Login (AUTHENTICATED). Worker/DataSources/Picker sind ansonsten no‑op.
  - TDLib service model: TDLib im separaten Prozess via Service; foreground nur bei Downloads/Auth; `SetInBackground` am Lifecycle; `SetNetworkType` bei Net‑Wechseln. FCM Push (hooks vorhanden), weniger Polling; WorkManager bleibt Fallback.
 
 For the complete module-by-module guide, see `ARCHITECTURE_OVERVIEW.md`.
 
 ---
 
 Recent
 - TV chrome BACK: On TV, ESC/BACK first collapses HomeChrome (from Expanded or Visible) and consumes the event. This prevents closing the player or leaving the screen when the chrome is showing; pressing BACK twice still exits as expected.
 - Tile focus logging: Core row engines (MediaRowCore/MediaRowCorePaged) now emit detailed `focus:<type> id=<id> <ui title> (<OBX title>)` logs on focus, plus a `tree:` hint. Makes it visible in logcat which concrete tile currently has focus across Start/Library/Details rows.
-- TV rows centering: Single-step centering when the target tile is already visible (RowCore, RowCorePaged, TvFocusRow), eliminating left→right jitter. While the row
+- TV rows centering: Single-step centering when the target tile is already visible (RowCore, RowCorePaged, TvFocusRow), eliminating left→right jitter.
diff --git a/ARCHITECTURE_OVERVIEW.md b/ARCHITECTURE_OVERVIEW.md
index a60e42e..9cef1a9 100644
--- a/ARCHITECTURE_OVERVIEW.md
+++ b/ARCHITECTURE_OVERVIEW.md
@@ -24,7 +24,7 @@ Dieses Dokument bietet den vollständigen, detaillierten Überblick über Module
 >
 > - Android (Kotlin), Jetpack Compose, Navigation‑Compose  
 > - DataStore Preferences, WorkManager  
-> - OkHttp (HTTP), Coil 3 (Bilder), Media3/ExoPlayer (Video)  
+> - OkHttp (HTTP), Coil 3 (Bilder), Media3/ExoPlayer (Video)
 > - Persistenz: ObjectBox (OBX) als Primär‑Store  
 > - Module: `app` (Haupt‑App) + `libtd` (TDLib JNI/Java)
 
@@ -81,12 +81,12 @@ Telegram Gating
 ├── core/
 │   ├── http/HttpClient.kt                  # OkHttp mit UA/Referer/Extra-Headern aus SettingsStore
 │   ├── m3u/M3UExporter.kt                  # Exportiert ObjectBox-Kataloge als M3U (Backup/Sharing)
 │   └── xtream/                             # Xtream Codes REST-Client, Seeder & Models
 │       ├── XtreamClient.kt                 # canonical client (Discovery + Listen + Details + EPG + Play-URLs)
 │       ├── XtreamConfig.kt                 # Konfiguration + Ableitung aus Xtream/M3U-URL (get.php)
 │       ├── XtreamSeeder.kt                 # Kopf-Import (Live/VOD/Series) + Discovery-Koordination
 │       └── XtreamModels.kt
         
         Xtream Client Notes
         - Discovery→Fetch: On first run, the app forces discovery and immediately fires the six reference list calls (live/vod/series: categories + streams).
         - Wildcard category: when no category is selected, requests include `&category_id=0`; if both wildcard and `0` return empty, the client retries once without the parameter to satisfy stricter panels.
         - VOD alias: client uses the discovered alias (`vod|movie|movies`) for categories/streams and falls back in a defined order.
         - VOD IDs: client falls back to `stream_id` when `vod_id`/`movie_id` are missing, so ObjectBox imports succeed on panels that only expose stream IDs.
         - Series episodes: prefer Xtream `episode_id` when building play URLs; fall back to season/episode numbers for legacy panels.
         - Trailers: normalize bare YouTube IDs to full URLs before playback so ExoPlayer receives a valid URI.
         - Direct URLs: `XtreamUrlFactory` consults the capability cache (vodKind/basePath) before emitting play URLs so direct playback matches the resolved server alias.
         - Telemetry: every `player_api.php?action=...` URL is logged at info level to aid debugging traffic sequences.
         - WAF-friendly probes: discovery pings include explicit `action` and `category_id=0` so Cloudflare/WAF returns JSON instead of 521.
 ├── data/
-│   ├── db/                                 # Room: Entities, DAOs, Database
-│   │   ├── AppDatabase.kt                  # Versionierung, Migrations, Seeding (Adult Profile)
-│   │   └── Entities.kt                     # MediaItem, MediaItemFts (FTS4), Episode, Category, Profile, KidContent,
-│   │                                       # ResumeMark, ScreenTimeEntry, Views + DAOs
+│   ├── db/                                 # Room (legacy): Entities, DAOs, Database – retained for compatibility; core flows use ObjectBox
+│   │   ├── AppDatabase.kt                  # Versionierung, Migrations (legacy), Seeding (Adult Profile)
+│   │   └── Entities.kt                     # MediaItem(+FTS4 legacy), Episode, Category, Profile, KidContent, ResumeMark, ScreenTimeEntry, Views + DAOs (legacy)
 │   └── repo/                               # Repositories (IO/Business-Logik)
 │       ├── XtreamObxRepository.kt          # Xtream Lists/Details → ObjectBox (Heads, Delta, Details)
-│       ├── EpgRepository.kt                # Now/Next: persistenter Room‑Cache (epg_now_next) + XMLTV‑Fallback
-│       ├── MediaQueryRepository.kt         # Gefilterte Queries (Kids-Whitelist), Suche (FTS)
+│       ├── EpgRepository.kt                # Now/Next: persistenter OBX‑Cache (ObxEpgNowNext) + XMLTV‑Fallback
+│       ├── MediaQueryRepository.kt         # Gefilterte Queries (Kids-Whitelist), Suche (OBX 'nameLower' Indizes)
 │       ├── ProfileRepository.kt            # Profile & aktuelles Profil (Adult/Kid), PIN/Remember
 │       ├── KidContentRepository.kt         # Whitelist-Verwaltung (allow/disallow/bulk)
 │       ├── ResumeRepository.kt             # Wiedergabe-Fortschritt (vod/episode)
 │       └── ScreenTimeRepository.kt         # Tages-Limits, Verbrauch, Reset
 ├── player/
@@ -120,7 +120,7 @@ Telegram Gating
     ├── ObxKeyBackfillWorker.kt             # One‑shot Key‑Backfill (sort/provider/genre/year)
     ├── (removed)                           # EPG periodic worker removed; OBX prefetch on-demand
     ├── SchedulingGateway.kt                # Zentrales Unique-Work Scheduling (KEEP/REPLACE)
     ├── ScreenTimeResetWorker.kt            # täglicher Reset der ScreenTime
     └── BootCompletedReceiver.kt            # Re-Scheduling nach Boot
 ```
 
 ---
 
 ## 3) Screens & Navigations‑Flow
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 403b36e..d0e58f4 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,11 @@
+2025-09-29
+- docs(agents): resolve internal contradictions
+  - clarify ObjectBox as primary store; Room removed from primary flows (legacy tables/IDs may persist during transition)
+  - EPG is OBX-only (short EPG) with XMLTV fallback; no periodic worker
+  - update TDLib default pin to v1.8.29 to match build scripts
+  - fix truncated sentence in “Recent” section
+- docs(architecture): mark Room as legacy, update EPG repository and search notes to OBX-first
+
 2025-09-27
 - fix(manifest/icon): set application icon to `@mipmap/ic_launcher` and add `android:roundIcon` (`@mipmap/ic_launcher_round`) instead of the missing `@drawable/fisch_bg`. Launcher already uses adaptive mipmaps; this aligns the manifest with actual assets.
 - docs(roadmap): Priorität‑1 Tasks für TV Fokus/DPAD vereinheitlicht: alle horizontalen Container → TvFocusRow (inkl. Chips/Carousels), alle interaktiven Elemente → tvClickable/tvFocusableItem (No‑Op auf Phone), zentrale Scroll+Fokus‑Registry (ScrollStateRegistry), einheitliche Auto‑Collapse/Expand‑Trigger im HomeChromeScaffold, kein onPreviewKeyEvent außer echten Sonderfällen, Audit‑Skript erzwingt Regeln.
diff --git a/AGENTS.md b/AGENTS.md
index 7a91c7d..e6f4ccf 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -24,7 +24,7 @@ Codex – Operating Rules (override)
 - Full context gathering: For a complete overview, Codex also reads ROADMAP.md, CHANGELOG.md, ARCHITECTURE_OVERVIEW.md, and the latest commits/PRs to understand the current state before making changes.
 - Auto documentation upkeep: Immediately after patches, Codex updates the full documentation set (AGENTS.md, ROADMAP.md, CHANGELOG.md, ARCHITECTURE_OVERVIEW.md) and pushes to `master`. If the environment blocks direct writes or pushes, Codex prepares diffs and requests the smallest possible approval to finalize.
  - Deep dependency awareness: When patching, Codex reads all relevant modules in appropriately sized batches and considers all dependent modules. `ARCHITECTURE_OVERVIEW.md` is maintained as a detailed, human‑friendly derivative; if it disagrees with this file, this file wins.
 - Xtream single source: The folder `app/src/main/java/com/chris/m3usuite/core/xtream` is the canonical source for Xtream handling (detect, config, capabilities, client, models). Other usages must adapt to these APIs.
-- ObjectBox primary store: ObjectBox is the primary local store for content (categories, live, vod, series, episodes, epg_now_next). Telegram metadata is now stored in ObjectBox as well (`ObxTelegramMessage`). Room has been removed from app flows.
+- ObjectBox primary store: ObjectBox is the primary local store for content (categories, live, vod, series, episodes, epg_now_next). Telegram metadata is now stored in ObjectBox as well (`ObxTelegramMessage`). Room has been removed from primary app flows; legacy tables/IDs may still exist for compatibility during the transition.
 - OBX ID bridging: OBX‑backed lists encode stable IDs into `MediaItem.id` for navigation: live=`1e12+streamId`, vod=`2e12+vodId`, series=`3e12+seriesId`. Detail screens resolve these IDs to OBX and build play URLs via `XtreamClient`. Legacy Room IDs remain supported where present (favorites/resume) during the transition.
 - ObjectBox search: Search uses indexed `nameLower` fields and category-name matches with page-aware merging (no full in-memory merges). Avoid Room paging in Library. Prefer OBX queries.
 - EPG fast path: Short EPG is fetched on-demand for visible live items and written to ObjectBox. Screens subscribe to `ObxEpgNowNext` (event-based). Room persistence has been removed.
@@ -59,7 +59,7 @@ Codex – Operating Rules (override)
 - Tooling upgrades: If Codex needs additional tools or configuration to work better, it informs the user and, where possible, sets them up itself; otherwise it provides clear, copy‑pastable step‑by‑step commands for the user to establish the optimal environment.
-- TDLib pinning: TDLib (JNI + Java bindings) is pinned to a specific upstream tag for reproducibility. The build script `scripts/tdlib-build-arm64.sh` checks out the tag and copies `TdApi.java`/`Client.java` from TDLib’s `example/java` into `libtd/src/main/java/org/drinkless/tdlib/`. Default pin: `v1.8.0` (the latest upstream tag as of now; override via env `TD_TAG`/`TD_COMMIT` or CLI `--ref <tag|commit>`). `Log.java` stays local to match JNI signatures.
+- TDLib pinning: TDLib (JNI + Java bindings) is pinned to a specific upstream tag for reproducibility. The build script `scripts/tdlib-build-arm64.sh` checks out the tag and copies `TdApi.java`/`Client.java` from TDLib’s `example/java` into `libtd/src/main/java/org/drinkless/tdlib/`. Default pin: `v1.8.29` (override via env `TD_TAG`/`TD_COMMIT` or CLI `--ref <tag|commit>`). `Log.java` stays local to match JNI signatures.
 
 Sandbox/WSL – Agent Execution Rules (Best Effort)
 - Repo‑local tools only: never use `sudo` or modify system config. Install portable binaries under `.wsl-*` and prefer them in `PATH`.
@@ -147,7 +147,7 @@ Git Push Policy (SSH, codex‑wsl)
 Where to find the full overview
 - The canonical, continuously updated source is `AGENTS.md` (this file).
 - `ARCHITECTURE_OVERVIEW.md` is a detailed, human‑friendly derivative of this file. If discrepancies occur, this file prevails. Keep `ARCHITECTURE_OVERVIEW.md` updated whenever new modules/features are added.
 
 Short bullet summary (current highlights)
-- Single-module app (`app`) with Compose UI, Room DB/DAOs, WorkManager, DataStore, Media3 player, OkHttp/Coil.
+- Single-module app (`app`) with Compose UI, ObjectBox (primary store), WorkManager, DataStore, Media3 player, OkHttp/Coil. Room remains only for legacy/transition paths where present; core flows are OBX-first.
   - Telegram integration (opt‑in, alpha → phase‑2 in progress): Login (Phone→Code→Passwort) mit auto DB‑Key‑Check; Settings‑Block mit Ordner/Chat‑Picker und separaten Quellen für Film/Serien‑Sync; Sync‑Worker mappt Nachrichten auf VOD (`MediaItem.source=TG`) oder Serie (Episode.tg*; SxxExx‑Heuristik). Player streamt `tg://message?...` via Telegram‑DataSource (Seek, progressive Download). Packaging über `:libtd` (arm64). Phase‑2: QR‑Login (done), dedicated TDLib service process (done), foreground switching on downloads/auth (done), lifecycle/network hooks (done), FCM push hooks (prepped), event‑driven indexing (basis done), LTO (next).
     - Event‑driven indexing (Basis): TDLib‑Service lauscht auf `UpdateNewMessage`/`UpdateMessageContent`/`UpdateFile` und persistiert Minimal‑Metadaten in `telegram_messages` inkl. `localPath`‑Updates per `fileId`. Backfill via `TelegramSyncWorker` bleibt erhalten.
   - Index/Cache: `telegram_messages` wird beim Sync befüllt (fileId/uniqueId, caption, supportsStreaming, date, thumbFileId); `localPath` wird durch DataSources aktualisiert. Minimaler Sync‑Fortschritt in Settings; täglicher Cache‑Trim (GB‑Limit) via `TelegramCacheCleanupWorker`. FCM Push integriert (Token‑Registrierung + `processPushNotification`), Service startet lazy bei Push.
@@ -163,7 +163,7 @@ Short bullet summary (current highlights)
 - Diagnostics: Settings zeigt OBX-Zähler (Live/VOD/Series) und eine "Import aktualisieren"-Aktion, die `XtreamSeeder` erneut ausführt (optional mit Discovery-Force) und Detailjobs plant. Eine Strict-M3U-Option existiert nicht mehr; explizite Prune-Läufe sind Separate Wartungsjobs.
   - Globales Debugging (schaltbar): Schalter in „Import & Diagnose“. Wenn aktiviert, protokolliert das Modul Navigationsschritte (NavController Listener), DPAD‑Eingaben (inkl. Player‑Tasten), Tile‑Focus (mit OBX‑Titel in Klammern) und OBX‑Key‑Updates (Backfill der sort/provider/genre/year Keys) nach Logcat unter dem Tag `GlobalDebug`. Default OFF.
 
-- EPG: Now/Next dual-persist (Room + ObjectBox) with XMLTV fallback; no periodic worker. UI reads OBX; on-demand prefetch for visible tiles and favorites at app start; Live tiles show title + progress.
+- EPG: Now/Next persisted in ObjectBox (short EPG) with XMLTV fallback; no periodic worker. UI reads OBX; on-demand prefetch for visible tiles and favorites at app start; Live tiles show title + progress.
 - Unified UI polish: Accent tokens (adult/kid), carded sections (`AccentCard`), gradient + glow background with blurred app icon; kid profiles use a vibrant palette.
 - TV buttons: Use `TvButton`/`TvTextButton`/`TvOutlinedButton`/`TvIconButton` (in `ui/common/TvButtons.kt`) to get focus glow + bounce by default. Avoid raw Material3 buttons in TV paths.
 - TV Lazy migration: Do not use `androidx.tv.foundation.TvLazyRow` (deprecated). Use `LazyRow` from compose.foundation with TV focus APIs: `focusGroup()` on the container and `focusable()` + bring-into-view on item focus. A reusable wrapper `com.chris.m3usuite.ui.tv.TvFocusRow` is available and should be used for horizontal TV rows (chips, carousels, overlays). Remove manual DPAD index arithmetic; prefer `moveFocus(...)` when needed.
@@ -181,7 +181,7 @@ Policies (Do/Don't)
 - Provider normalization: UI-Gruppierungen nutzen `CategoryNormalizer`; Rows gruppieren nach normalisierten Schlüsseln, nicht nach rohen group‑title Strings.
   - Neu: `normalizeBucket(kind, groupTitle, tvgName, url)` begrenzt je Kind (live/vod/series) die Kategorien auf ≤10 stabile Buckets (z. B. live: sports/news/documentary/kids/music/international/entertainment/screensaver/movies; vod: netflix/amazon_prime/disney_plus/apple_tv_plus/sky_warner/anime/new/kids/german/other; series analog). Qualitätstoken (HEVC/FHD/HD/SD/4K) fließen nicht in die Buckets ein.
 - Telegram gating: Keine TDLib‑Nutzung ohne aktives Flag (`tg_enabled=true`) und erfolgreichen Login (AUTHENTICATED). Worker/DataSources/Picker sind ansonsten no‑op.
  - TDLib service model: TDLib im separaten Prozess via Service; foreground nur bei Downloads/Auth; `SetInBackground` am Lifecycle; `SetNetworkType` bei Net‑Wechseln. FCM Push (hooks vorhanden), weniger Polling; WorkManager bleibt Fallback.
 
 For the complete module-by-module guide, see `ARCHITECTURE_OVERVIEW.md`.
 
 ---
 
 Recent
 - TV chrome BACK: On TV, ESC/BACK first collapses HomeChrome (from Expanded or Visible) and consumes the event. This prevents closing the player or leaving the screen when the chrome is showing; pressing BACK twice still exits as expected.
 - Tile focus logging: Core row engines (MediaRowCore/MediaRowCorePaged) now emit detailed `focus:<type> id=<id> <ui title> (<OBX title>)` logs on focus, plus a `tree:` hint. Makes it visible in logcat which concrete tile currently has focus across Start/Library/Details rows.
-- TV rows centering: Single-step centering when the target tile is already visible (RowCore, RowCorePaged, TvFocusRow), eliminating left→right jitter. While the row
+- TV rows centering: Single-step centering when the target tile is already visible (RowCore, RowCorePaged, TvFocusRow), eliminating left→right jitter.
