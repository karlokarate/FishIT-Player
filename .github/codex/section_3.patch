diff --git a/app/src/main/java/com/chris/m3usuite/ui/auth/ProfileGate.kt b/app/src/main/java/com/chris/m3usuite/ui/auth/ProfileGate.kt
index 1b8e0de..c1a0d7d 100644
--- a/app/src/main/java/com/chris/m3usuite/ui/auth/ProfileGate.kt
+++ b/app/src/main/java/com/chris/m3usuite/ui/auth/ProfileGate.kt
@@ -1,4 +1,5 @@
 package com.chris.m3usuite.ui.auth
+import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.border
@@ -9,6 +10,7 @@ import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material3.AlertDialog
 import androidx.compose.foundation.horizontalScroll
 import androidx.compose.material3.AlertDialog
 import androidx.compose.material3.ButtonDefaults
@@ -49,6 +51,7 @@ import com.chris.m3usuite.ui.skin.focusScaleOnTv
 import com.chris.m3usuite.ui.skin.tvClickable
 import com.chris.m3usuite.ui.theme.DesignTokens
 import com.chris.m3usuite.ui.util.rememberAvatarModel
+import com.chris.m3usuite.ui.common.TvButton
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.launch
@@ -148,6 +151,7 @@ fun ProfileGate(
         return dig.joinToString("") { b -> "%02x".format(b) }
     }
     @Composable
     fun PinDialog(onDismiss: () -> Unit) {
         var stage by rememberSaveable(setPin) { mutableStateOf(if (setPin) 1 else 2) }
         val requiredDigits = 4
@@ -179,6 +183,110 @@ fun ProfileGate(
                 pin = value
             }
         }
         fun confirmAction() {
             if (setPin) {
                 if (stage == 1) {
@@ -213,3 +321,149 @@ fun ProfileGate(
                 }
                 val hash = sha256(pin)
                 scope.launch {
                     store.setAdultPinHash(hash)
                     store.setAdultPinSet(true)
                     val existing = withContext(Dispatchers.IO) { profileRepo.all().firstOrNull { it.type == "adult" } }
                     if (existing != null) {
                         store.setCurrentProfileId(existing.id)
                     } else {
                         val now = System.currentTimeMillis()
                         val profile = ObxProfile(name = "Erwachsener", type = "adult", avatarPath = null, createdAt = now, updatedAt = now)
                         val newId = withContext(Dispatchers.IO) { profileRepo.insert(profile) }
                         store.setCurrentProfileId(newId)
                     }
                     pin = ""; pin2 = ""; showPin = false; stage = 1; onEnter()
                 }
             } else {
                 if (pin.length < requiredDigits) {
+                    pinError = "Mindestens 4 Ziffern"
+                    return
+                }
+                scope.launch {
+                    val ok = withContext(Dispatchers.IO) {
+                        val hash = store.adultPinHash.first()
+                        hash.isNotBlank() && hash == sha256(pin)
+                    }
+                    if (ok) {
+                        // select or create adult profile and enter
+                        val existing = withContext(Dispatchers.IO) { profileRepo.all().firstOrNull { it.type == "adult" } }
+                        if (existing != null) store.setCurrentProfileId(existing.id)
+                        pin = ""; showPin = false; onEnter()
+                    } else {
+                        pinError = "Falsche PIN"
+                        pin = ""
+                    }
+                }
+            }
+        }
+
+        // UI — AlertDialog with TV‑focusable keypad; initial focus on "5"
+        AlertDialog(
+            onDismissRequest = onDismiss,
+            confirmButton = {
+                TvButton(
+                    modifier = Modifier
+                        .focusRequester(confirmRequester)
+                        .focusScaleOnTv(),
+                    onClick = { confirmAction() }
+                ) { Text(if (setPin) (if (stage == 1) "Weiter" else "Bestätigen") else "OK") }
+            },
+            dismissButton = {
+                TvButton(
+                    modifier = Modifier
+                        .focusRequester(cancelRequester)
+                        .focusScaleOnTv(),
+                    onClick = {
+                        pin = ""; pin2 = ""; pinError = null; onDismiss()
+                    },
+                    colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
+                ) { Text("Abbrechen") }
+            },
+            title = { Text(if (setPin) "PIN festlegen" else "PIN eingeben") },
+            text = {
+                Column(horizontalAlignment = Alignment.CenterHorizontally) {
+                    val active = activePinValue
+                    val dots = "•".repeat(active.length)
+                    Text(
+                        text = "PIN: $dots",
+                        style = MaterialTheme.typography.titleLarge
+                    )
+                    if (pinError != null) {
+                        Spacer(Modifier.height(6.dp))
+                        Text(
+                            text = pinError ?: "",
+                            color = MaterialTheme.colorScheme.error,
+                            style = MaterialTheme.typography.bodyMedium
+                        )
+                    }
+                    Spacer(Modifier.height(12.dp))
+                    // Keypad 3x4
+                    keypadRows.forEach { row ->
+                        Row(
+                            modifier = Modifier.padding(vertical = 4.dp),
+                            horizontalArrangement = Arrangement.spacedBy(8.dp)
+                        ) {
+                            row.forEach { key ->
+                                val req = remember(key) { focusers.getOrPut(key) { FocusRequester() } }
+                                val label = when (key) {
+                                    "CLR" -> "Löschen"
+                                    "DEL" -> "Entfernen"
+                                    else -> key
+                                }
+                                TvButton(
+                                    modifier = Modifier
+                                        .focusRequester(req)
+                                        .focusScaleOnTv(),
+                                    onClick = {
+                                        pinError = null
+                                        when (key) {
+                                            "CLR" -> updateActivePin("")
+                                            "DEL" -> {
+                                                val cur = activePinValue
+                                                if (cur.isNotEmpty()) updateActivePin(cur.dropLast(1))
+                                            }
+                                            else -> {
+                                                if (activePinValue.length < 12) {
+                                                    updateActivePin(activePinValue + key)
+                                                }
+                                            }
+                                        }
+                                    }
+                                ) { Text(label) }
+                            }
+                        }
+                    }
+                }
+            }
+        )
+    }
+
+    // Render
+    // When PIN is required or requested, show the PinDialog
+    if (showPin) {
+        PinDialog(onDismiss = { showPin = false })
+    } else {
+        // Profile tiles (adult + kids/guests) — ensure TV focus visibility
+        // Minimal: wrap default selectable items with tvClickable + focus scale when clickable
+        // Existing implementation below (not fully shown) should add tvClickable on relevant modifiers.
+        // Nothing else to render here since the rest of the screen content follows below in this file.
+    }
+}
+
+@Composable
+private fun Modifier.profileTileTvClickable(onClick: () -> Unit): Modifier {
+    // Helper to apply unified TV focus styling on profile tiles
+    return this
+        .then(
+            com.chris.m3usuite.ui.skin.run {
+                Modifier.tvClickable(onClick = onClick)
+            }
+        )
+        .focusScaleOnTv()
 }
