diff --git a/app/src/main/java/com/chris/m3usuite/ui/state/RememberHelpers.kt b/app/src/main/java/com/chris/m3usuite/ui/state/RememberHelpers.kt
index 8f1ad82..2a01172 100644
--- a/app/src/main/java/com/chris/m3usuite/ui/state/RememberHelpers.kt
+++ b/app/src/main/java/com/chris/m3usuite/ui/state/RememberHelpers.kt
@@ -1,14 +1,20 @@
 package com.chris.m3usuite.ui.state
 
 import androidx.compose.foundation.lazy.LazyListState
 import androidx.compose.foundation.lazy.grid.LazyGridState
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.MutableState
 import androidx.compose.runtime.saveable.Saver
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.runtime.snapshotFlow
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.ui.text.input.TextFieldValue
 import kotlinx.coroutines.flow.collectLatest
 
 /**
  * RememberHelpers â€“ Composable helpers that read/write ScrollStateRegistry for scroll positions.
  */
@@ -38,3 +44,63 @@ fun rememberRouteGridState(routeKey: String): LazyGridState {
     }
     return state
 }
+
+// -------- Route-based Filter/Chip helpers (typed) -----------------------------
+
+private val stringStateSaver: Saver<MutableState<String>, String> = Saver(
+    save = { it.value },
+    restore = { v -> mutableStateOf(v) }
+)
+private val intStateSaver: Saver<MutableState<Int>, Int> = Saver(
+    save = { it.value },
+    restore = { v -> mutableStateOf(v) }
+)
+private val booleanStateSaver: Saver<MutableState<Boolean>, Boolean> = Saver(
+    save = { it.value },
+    restore = { v -> mutableStateOf(v) }
+)
+// Wrap TextFieldValue.Saver for MutableState
+@Suppress("UNCHECKED_CAST")
+private val textFieldValueStateSaver: Saver<MutableState<TextFieldValue>, Any> = Saver(
+    save = { state -> TextFieldValue.Saver.save(state.value) ?: "" },
+    restore = { any ->
+        val restored = TextFieldValue.Saver.restore(any) ?: TextFieldValue("")
+        mutableStateOf(restored)
+    }
+)
+
+@Composable
+fun rememberRouteFilterString(routeKey: String, default: String = ""): MutableState<String> {
+    val initial = ScrollStateRegistry.readFilterString(routeKey, default)
+    val state = rememberSaveable(key = "filter:$routeKey", saver = stringStateSaver) {
+        mutableStateOf(initial)
+    }
+    LaunchedEffect(routeKey, state.value) {
+        ScrollStateRegistry.writeFilterString(routeKey, state.value)
+    }
+    return state
+}
+
+@Composable
+fun rememberRouteFilterInt(routeKey: String, default: Int = 0): MutableState<Int> {
+    val initial = ScrollStateRegistry.readFilterInt(routeKey, default)
+    val state = rememberSaveable(key = "filter:$routeKey", saver = intStateSaver) {
+        mutableStateOf(initial)
+    }
+    LaunchedEffect(routeKey, state.value) {
+        ScrollStateRegistry.writeFilterInt(routeKey, state.value)
+    }
+    return state
+}
+
+@Composable
+fun rememberRouteFilterBoolean(routeKey: String, default: Boolean = false): MutableState<Boolean> {
+    val initial = ScrollStateRegistry.readFilterBoolean(routeKey, default)
+    val state = rememberSaveable(key = "filter:$routeKey", saver = booleanStateSaver) {
+        mutableStateOf(initial)
+    }
+    LaunchedEffect(routeKey, state.value) {
+        ScrollStateRegistry.writeFilterBoolean(routeKey, state.value)
+    }
+    return state
+}
+
+@Composable
+fun rememberRouteTextFieldValue(routeKey: String, default: String = ""): MutableState<TextFieldValue> {
+    val initialText = ScrollStateRegistry.readFilterString(routeKey, default)
+    val state = rememberSaveable(key = "filter:$routeKey", saver = textFieldValueStateSaver) {
+        mutableStateOf(TextFieldValue(initialText))
+    }
+    LaunchedEffect(routeKey, state.value.text) {
+        ScrollStateRegistry.writeFilterString(routeKey, state.value.text)
+    }
+    return state
+}
